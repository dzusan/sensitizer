   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"calculations.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	sensorValues,12,4
  19              		.comm	rotationMatrix,18,4
  20              		.comm	clearValues,12,4
  21              		.global	rxCount
  22              		.bss
  23              		.align	2
  26              	rxCount:
  27 0000 00000000 		.space	4
  28              		.global	START_RX_BYTE
  29              		.section	.rodata
  30              		.align	1
  33              	START_RX_BYTE:
  34 0000 0000     		.space	2
  35              		.global	rxSeq
  36 0002 0000     		.align	2
  39              	rxSeq:
  40 0004 00000000 		.word	START_RX_BYTE
  41 0008 00000000 		.word	sensorValues
  42 000c 02000000 		.word	sensorValues+2
  43 0010 04000000 		.word	sensorValues+4
  44 0014 06000000 		.word	sensorValues+6
  45 0018 08000000 		.word	sensorValues+8
  46 001c 0A000000 		.word	sensorValues+10
  47 0020 00000000 		.word	rotationMatrix
  48 0024 02000000 		.word	rotationMatrix+2
  49 0028 04000000 		.word	rotationMatrix+4
  50 002c 06000000 		.word	rotationMatrix+6
  51 0030 08000000 		.word	rotationMatrix+8
  52 0034 0A000000 		.word	rotationMatrix+10
  53 0038 0C000000 		.word	rotationMatrix+12
  54 003c 0E000000 		.word	rotationMatrix+14
  55 0040 10000000 		.word	rotationMatrix+16
  56              		.global	txCount
  57              		.bss
  58              		.align	2
  61              	txCount:
  62 0004 00000000 		.space	4
  63              		.global	START_TX_BYTE
  64              		.section	.rodata
  65              		.align	1
  68              	START_TX_BYTE:
  69 0044 0000     		.space	2
  70              		.global	txSeq
  71 0046 0000     		.align	2
  74              	txSeq:
  75 0048 00000000 		.word	START_TX_BYTE
  76 004c 00000000 		.word	clearValues
  77 0050 02000000 		.word	clearValues+2
  78 0054 04000000 		.word	clearValues+4
  79 0058 06000000 		.word	clearValues+6
  80 005c 08000000 		.word	clearValues+8
  81 0060 0A000000 		.word	clearValues+10
  82              		.comm	ToolProperties,12,4
  83              		.global	__aeabi_i2f
  84              		.global	__aeabi_fcmpgt
  85              		.global	__aeabi_fcmplt
  86              		.text
  87              		.align	2
  88              		.global	typeConversion
  89              		.thumb
  90              		.thumb_func
  92              	typeConversion:
  93              	.LFB29:
  94              		.file 1 "../calculations.c"
   1:../calculations.c **** /*
   2:../calculations.c ****  * calculations.c
   3:../calculations.c ****  *
   4:../calculations.c ****  *  Created on: 23.12.2012
   5:../calculations.c ****  *      Author: dzusan
   6:../calculations.c ****  */
   7:../calculations.c **** 
   8:../calculations.c **** 
   9:../calculations.c **** #include "calculations.h"
  10:../calculations.c **** 
  11:../calculations.c **** float typeConversion(uint16_t input)
  12:../calculations.c **** {
  95              		.loc 1 12 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 16
  98              		@ frame_needed = 1, uses_anonymous_args = 0
  99 0000 80B5     		push	{r7, lr}
 100              	.LCFI0:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 7, -8
 103              		.cfi_offset 14, -4
 104 0002 84B0     		sub	sp, sp, #16
 105              	.LCFI1:
 106              		.cfi_def_cfa_offset 24
 107 0004 00AF     		add	r7, sp, #0
 108              	.LCFI2:
 109              		.cfi_def_cfa_register 7
 110 0006 0346     		mov	r3, r0
 111 0008 FB80     		strh	r3, [r7, #6]	@ movhi
  13:../calculations.c **** 	float tmp;
  14:../calculations.c **** 	tmp = (float)((input & 0b0011111111111111)/10000);
 112              		.loc 1 14 0
 113 000a FB88     		ldrh	r3, [r7, #6]
 114 000c 4FEA8343 		lsl	r3, r3, #18
 115 0010 4FEA9343 		lsr	r3, r3, #18
 116 0014 164A     		ldr	r2, .L12
 117 0016 82FB0312 		smull	r1, r2, r2, r3
 118 001a 4FEA2232 		asr	r2, r2, #12
 119 001e 4FEAE373 		asr	r3, r3, #31
 120 0022 D31A     		subs	r3, r2, r3
 121 0024 1846     		mov	r0, r3
 122 0026 FFF7FEFF 		bl	__aeabi_i2f
 123 002a 0346     		mov	r3, r0
 124 002c FB60     		str	r3, [r7, #12]	@ float
  15:../calculations.c **** 	if(input & 0b1000000000000000) tmp *= -1;
 125              		.loc 1 15 0
 126 002e FB88     		ldrh	r3, [r7, #6]
 127 0030 1BB2     		sxth	r3, r3
 128 0032 002B     		cmp	r3, #0
 129 0034 03DA     		bge	.L2
 130              		.loc 1 15 0 is_stmt 0 discriminator 1
 131 0036 FB68     		ldr	r3, [r7, #12]
 132 0038 83F00043 		eor	r3, r3, #-2147483648
 133 003c FB60     		str	r3, [r7, #12]	@ float
 134              	.L2:
  16:../calculations.c **** 	if(tmp > 1)  return  1;
 135              		.loc 1 16 0 is_stmt 1
 136 003e F868     		ldr	r0, [r7, #12]	@ float
 137 0040 0C49     		ldr	r1, .L12+4	@ float
 138 0042 FFF7FEFF 		bl	__aeabi_fcmpgt
 139 0046 0346     		mov	r3, r0
 140 0048 002B     		cmp	r3, #0
 141 004a 01D0     		beq	.L10
 142              	.L8:
 143              		.loc 1 16 0 is_stmt 0 discriminator 1
 144 004c 094B     		ldr	r3, .L12+4	@ float
 145 004e 09E0     		b	.L5
 146              	.L10:
  17:../calculations.c **** 	if(tmp < -1) return -1;
 147              		.loc 1 17 0 is_stmt 1
 148 0050 F868     		ldr	r0, [r7, #12]	@ float
 149 0052 0949     		ldr	r1, .L12+8	@ float
 150 0054 FFF7FEFF 		bl	__aeabi_fcmplt
 151 0058 0346     		mov	r3, r0
 152 005a 002B     		cmp	r3, #0
 153 005c 01D0     		beq	.L11
 154              	.L9:
 155              		.loc 1 17 0 is_stmt 0 discriminator 1
 156 005e 064B     		ldr	r3, .L12+8	@ float
 157 0060 00E0     		b	.L5
 158              	.L11:
  18:../calculations.c **** 	return tmp;
 159              		.loc 1 18 0 is_stmt 1
 160 0062 FB68     		ldr	r3, [r7, #12]	@ float
 161              	.L5:
  19:../calculations.c **** }
 162              		.loc 1 19 0
 163 0064 1846     		mov	r0, r3
 164 0066 07F11007 		add	r7, r7, #16
 165 006a BD46     		mov	sp, r7
 166 006c 80BD     		pop	{r7, pc}
 167              	.L13:
 168 006e 00BF     		.align	2
 169              	.L12:
 170 0070 AD8BDB68 		.word	1759218605
 171 0074 0000803F 		.word	1065353216
 172 0078 000080BF 		.word	-1082130432
 173              		.cfi_endproc
 174              	.LFE29:
 176              		.global	__aeabi_fmul
 177              		.global	__aeabi_fadd
 178              		.global	__aeabi_fsub
 179              		.global	__aeabi_f2iz
 180              		.global	__aeabi_f2uiz
 181              		.align	2
 182              		.global	Calculations
 183              		.thumb
 184              		.thumb_func
 186              	Calculations:
 187              	.LFB30:
  20:../calculations.c **** 
  21:../calculations.c **** void Calculations(void)
  22:../calculations.c **** {
 188              		.loc 1 22 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 48
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 007c B0B5     		push	{r4, r5, r7, lr}
 193              	.LCFI3:
 194              		.cfi_def_cfa_offset 16
 195              		.cfi_offset 4, -16
 196              		.cfi_offset 5, -12
 197              		.cfi_offset 7, -8
 198              		.cfi_offset 14, -4
 199 007e 8CB0     		sub	sp, sp, #48
 200              	.LCFI4:
 201              		.cfi_def_cfa_offset 64
 202 0080 00AF     		add	r7, sp, #0
 203              	.LCFI5:
 204              		.cfi_def_cfa_register 7
  23:../calculations.c **** 	int countEx, countIn, countSum;
  24:../calculations.c **** 
  25:../calculations.c **** 	float tmpCoordinateGravityForceVector[3] = {0, 0, 0};
 205              		.loc 1 25 0
 206 0082 944B     		ldr	r3, .L21+12	@ float
 207 0084 BB61     		str	r3, [r7, #24]	@ float
 208 0086 934B     		ldr	r3, .L21+12	@ float
 209 0088 FB61     		str	r3, [r7, #28]	@ float
 210 008a 924B     		ldr	r3, .L21+12	@ float
 211 008c 3B62     		str	r3, [r7, #32]	@ float
  26:../calculations.c **** 	float tmpCoordinateCMVector[3] = {0, 0, 0};
 212              		.loc 1 26 0
 213 008e 914B     		ldr	r3, .L21+12	@ float
 214 0090 FB60     		str	r3, [r7, #12]	@ float
 215 0092 904B     		ldr	r3, .L21+12	@ float
 216 0094 3B61     		str	r3, [r7, #16]	@ float
 217 0096 8F4B     		ldr	r3, .L21+12	@ float
 218 0098 7B61     		str	r3, [r7, #20]	@ float
  27:../calculations.c **** 
  28:../calculations.c **** 	/*Vector rotation:
  29:../calculations.c **** 	 *[totalRotationMatrix X gravityForceVector]
  30:../calculations.c **** 	 *[totalRotationMatrix X CMVector]*/
  31:../calculations.c **** 
  32:../calculations.c **** 	for(countIn = 0; countIn < 3; countIn++)
 219              		.loc 1 32 0
 220 009a 4FF00003 		mov	r3, #0
 221 009e BB62     		str	r3, [r7, #40]
 222 00a0 7AE0     		b	.L15
 223              	.L18:
  33:../calculations.c **** 		for(countSum = 0; countSum < 3; countSum++)
 224              		.loc 1 33 0
 225 00a2 4FF00003 		mov	r3, #0
 226 00a6 7B62     		str	r3, [r7, #36]
 227 00a8 6FE0     		b	.L16
 228              	.L17:
  34:../calculations.c **** 		{
  35:../calculations.c **** 			tmpCoordinateGravityForceVector[countIn] += typeConversion(rotationMatrix[countIn][countSum]) * 
 229              		.loc 1 35 0 discriminator 2
 230 00aa BB6A     		ldr	r3, [r7, #40]
 231 00ac 4FEA8303 		lsl	r3, r3, #2
 232 00b0 07F13001 		add	r1, r7, #48
 233 00b4 CB18     		adds	r3, r1, r3
 234 00b6 53F8184C 		ldr	r4, [r3, #-24]	@ float
 235 00ba 8349     		ldr	r1, .L21
 236 00bc BA6A     		ldr	r2, [r7, #40]
 237 00be 1346     		mov	r3, r2
 238 00c0 4FEA4303 		lsl	r3, r3, #1
 239 00c4 9B18     		adds	r3, r3, r2
 240 00c6 7A6A     		ldr	r2, [r7, #36]
 241 00c8 9B18     		adds	r3, r3, r2
 242 00ca 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ movhi
 243 00ce 9BB2     		uxth	r3, r3
 244 00d0 9BB2     		uxth	r3, r3
 245 00d2 1846     		mov	r0, r3
 246 00d4 FFF7FEFF 		bl	typeConversion
 247 00d8 0546     		mov	r5, r0
 248 00da 7C4B     		ldr	r3, .L21+4
 249 00dc 7A6A     		ldr	r2, [r7, #36]
 250 00de 33F81230 		ldrh	r3, [r3, r2, lsl #1]	@ movhi
 251 00e2 9BB2     		uxth	r3, r3
 252 00e4 1BB2     		sxth	r3, r3
 253 00e6 1846     		mov	r0, r3
 254 00e8 FFF7FEFF 		bl	__aeabi_i2f
 255 00ec 0346     		mov	r3, r0
 256 00ee 2846     		mov	r0, r5
 257 00f0 1946     		mov	r1, r3
 258 00f2 FFF7FEFF 		bl	__aeabi_fmul
 259 00f6 0346     		mov	r3, r0
 260 00f8 2046     		mov	r0, r4
 261 00fa 1946     		mov	r1, r3
 262 00fc FFF7FEFF 		bl	__aeabi_fadd
 263 0100 0346     		mov	r3, r0
 264 0102 1A46     		mov	r2, r3
 265 0104 BB6A     		ldr	r3, [r7, #40]
 266 0106 4FEA8303 		lsl	r3, r3, #2
 267 010a 07F13001 		add	r1, r7, #48
 268 010e CB18     		adds	r3, r1, r3
 269 0110 43F8182C 		str	r2, [r3, #-24]	@ float
  36:../calculations.c **** 			tmpCoordinateCMVector[countIn]           += typeConversion(rotationMatrix[countIn][countSum]) * 
 270              		.loc 1 36 0 discriminator 2
 271 0114 BB6A     		ldr	r3, [r7, #40]
 272 0116 4FEA8303 		lsl	r3, r3, #2
 273 011a 07F13002 		add	r2, r7, #48
 274 011e D318     		adds	r3, r2, r3
 275 0120 53F8244C 		ldr	r4, [r3, #-36]	@ float
 276 0124 6849     		ldr	r1, .L21
 277 0126 BA6A     		ldr	r2, [r7, #40]
 278 0128 1346     		mov	r3, r2
 279 012a 4FEA4303 		lsl	r3, r3, #1
 280 012e 9B18     		adds	r3, r3, r2
 281 0130 7A6A     		ldr	r2, [r7, #36]
 282 0132 9B18     		adds	r3, r3, r2
 283 0134 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ movhi
 284 0138 9BB2     		uxth	r3, r3
 285 013a 9BB2     		uxth	r3, r3
 286 013c 1846     		mov	r0, r3
 287 013e FFF7FEFF 		bl	typeConversion
 288 0142 0546     		mov	r5, r0
 289 0144 614A     		ldr	r2, .L21+4
 290 0146 7B6A     		ldr	r3, [r7, #36]
 291 0148 4FEA4303 		lsl	r3, r3, #1
 292 014c D318     		adds	r3, r2, r3
 293 014e DB88     		ldrh	r3, [r3, #6]	@ movhi
 294 0150 9BB2     		uxth	r3, r3
 295 0152 1BB2     		sxth	r3, r3
 296 0154 1846     		mov	r0, r3
 297 0156 FFF7FEFF 		bl	__aeabi_i2f
 298 015a 0346     		mov	r3, r0
 299 015c 2846     		mov	r0, r5
 300 015e 1946     		mov	r1, r3
 301 0160 FFF7FEFF 		bl	__aeabi_fmul
 302 0164 0346     		mov	r3, r0
 303 0166 2046     		mov	r0, r4
 304 0168 1946     		mov	r1, r3
 305 016a FFF7FEFF 		bl	__aeabi_fadd
 306 016e 0346     		mov	r3, r0
 307 0170 1A46     		mov	r2, r3
 308 0172 BB6A     		ldr	r3, [r7, #40]
 309 0174 4FEA8303 		lsl	r3, r3, #2
 310 0178 07F13001 		add	r1, r7, #48
 311 017c CB18     		adds	r3, r1, r3
 312 017e 43F8242C 		str	r2, [r3, #-36]	@ float
  33:../calculations.c **** 		for(countSum = 0; countSum < 3; countSum++)
 313              		.loc 1 33 0 discriminator 2
 314 0182 7B6A     		ldr	r3, [r7, #36]
 315 0184 03F10103 		add	r3, r3, #1
 316 0188 7B62     		str	r3, [r7, #36]
 317              	.L16:
  33:../calculations.c **** 		for(countSum = 0; countSum < 3; countSum++)
 318              		.loc 1 33 0 is_stmt 0 discriminator 1
 319 018a 7B6A     		ldr	r3, [r7, #36]
 320 018c 022B     		cmp	r3, #2
 321 018e 8CDD     		ble	.L17
  32:../calculations.c **** 	for(countIn = 0; countIn < 3; countIn++)
 322              		.loc 1 32 0 is_stmt 1
 323 0190 BB6A     		ldr	r3, [r7, #40]
 324 0192 03F10103 		add	r3, r3, #1
 325 0196 BB62     		str	r3, [r7, #40]
 326              	.L15:
  32:../calculations.c **** 	for(countIn = 0; countIn < 3; countIn++)
 327              		.loc 1 32 0 is_stmt 0 discriminator 1
 328 0198 BB6A     		ldr	r3, [r7, #40]
 329 019a 022B     		cmp	r3, #2
 330 019c 81DD     		ble	.L18
  37:../calculations.c **** 		}
  38:../calculations.c **** 
  39:../calculations.c **** 	/*Gravity force torque:
  40:../calculations.c **** 	 *[CMVector X  gravityForceVector]*/
  41:../calculations.c **** 
  42:../calculations.c **** 	int16_t gravityForceTorqueVector[3];
  43:../calculations.c **** 	gravityForceTorqueVector[0] = tmpCoordinateCMVector[1] * tmpCoordinateGravityForceVector[2] - tmpC
 331              		.loc 1 43 0 is_stmt 1
 332 019e 3A69     		ldr	r2, [r7, #16]	@ float
 333 01a0 3B6A     		ldr	r3, [r7, #32]	@ float
 334 01a2 1046     		mov	r0, r2
 335 01a4 1946     		mov	r1, r3
 336 01a6 FFF7FEFF 		bl	__aeabi_fmul
 337 01aa 0346     		mov	r3, r0
 338 01ac 1C46     		mov	r4, r3
 339 01ae 7A69     		ldr	r2, [r7, #20]	@ float
 340 01b0 FB69     		ldr	r3, [r7, #28]	@ float
 341 01b2 1046     		mov	r0, r2
 342 01b4 1946     		mov	r1, r3
 343 01b6 FFF7FEFF 		bl	__aeabi_fmul
 344 01ba 0346     		mov	r3, r0
 345 01bc 2046     		mov	r0, r4
 346 01be 1946     		mov	r1, r3
 347 01c0 FFF7FEFF 		bl	__aeabi_fsub
 348 01c4 0346     		mov	r3, r0
 349 01c6 1846     		mov	r0, r3
 350 01c8 FFF7FEFF 		bl	__aeabi_f2iz
 351 01cc 0346     		mov	r3, r0
 352 01ce 9BB2     		uxth	r3, r3
 353 01d0 BB80     		strh	r3, [r7, #4]	@ movhi
  44:../calculations.c **** 	gravityForceTorqueVector[1] = tmpCoordinateCMVector[2] * tmpCoordinateGravityForceVector[0] - tmpC
 354              		.loc 1 44 0
 355 01d2 7A69     		ldr	r2, [r7, #20]	@ float
 356 01d4 BB69     		ldr	r3, [r7, #24]	@ float
 357 01d6 1046     		mov	r0, r2
 358 01d8 1946     		mov	r1, r3
 359 01da FFF7FEFF 		bl	__aeabi_fmul
 360 01de 0346     		mov	r3, r0
 361 01e0 1C46     		mov	r4, r3
 362 01e2 FA68     		ldr	r2, [r7, #12]	@ float
 363 01e4 3B6A     		ldr	r3, [r7, #32]	@ float
 364 01e6 1046     		mov	r0, r2
 365 01e8 1946     		mov	r1, r3
 366 01ea FFF7FEFF 		bl	__aeabi_fmul
 367 01ee 0346     		mov	r3, r0
 368 01f0 2046     		mov	r0, r4
 369 01f2 1946     		mov	r1, r3
 370 01f4 FFF7FEFF 		bl	__aeabi_fsub
 371 01f8 0346     		mov	r3, r0
 372 01fa 1846     		mov	r0, r3
 373 01fc FFF7FEFF 		bl	__aeabi_f2iz
 374 0200 0346     		mov	r3, r0
 375 0202 9BB2     		uxth	r3, r3
 376 0204 FB80     		strh	r3, [r7, #6]	@ movhi
  45:../calculations.c **** 	gravityForceTorqueVector[2] = tmpCoordinateCMVector[0] * tmpCoordinateGravityForceVector[1] - tmpC
 377              		.loc 1 45 0
 378 0206 FA68     		ldr	r2, [r7, #12]	@ float
 379 0208 FB69     		ldr	r3, [r7, #28]	@ float
 380 020a 1046     		mov	r0, r2
 381 020c 1946     		mov	r1, r3
 382 020e FFF7FEFF 		bl	__aeabi_fmul
 383 0212 0346     		mov	r3, r0
 384 0214 1C46     		mov	r4, r3
 385 0216 3A69     		ldr	r2, [r7, #16]	@ float
 386 0218 BB69     		ldr	r3, [r7, #24]	@ float
 387 021a 1046     		mov	r0, r2
 388 021c 1946     		mov	r1, r3
 389 021e FFF7FEFF 		bl	__aeabi_fmul
 390 0222 0346     		mov	r3, r0
 391 0224 2046     		mov	r0, r4
 392 0226 1946     		mov	r1, r3
 393 0228 FFF7FEFF 		bl	__aeabi_fsub
 394 022c 0346     		mov	r3, r0
 395 022e 1846     		mov	r0, r3
 396 0230 FFF7FEFF 		bl	__aeabi_f2iz
 397 0234 0346     		mov	r3, r0
 398 0236 9BB2     		uxth	r3, r3
 399 0238 3B81     		strh	r3, [r7, #8]	@ movhi
  46:../calculations.c **** 
  47:../calculations.c **** 	/*Subtraction*/
  48:../calculations.c **** 
  49:../calculations.c **** 	for(countEx = 0; countEx < 3; countEx++)
 400              		.loc 1 49 0
 401 023a 4FF00003 		mov	r3, #0
 402 023e FB62     		str	r3, [r7, #44]
 403 0240 3AE0     		b	.L19
 404              	.L20:
  50:../calculations.c **** 	{
  51:../calculations.c **** 		clearValues.forceVector[countEx]  -= tmpCoordinateGravityForceVector[countEx];
 405              		.loc 1 51 0 discriminator 2
 406 0242 234B     		ldr	r3, .L21+8
 407 0244 FA6A     		ldr	r2, [r7, #44]
 408 0246 33F81230 		ldrh	r3, [r3, r2, lsl #1]	@ movhi
 409 024a 9BB2     		uxth	r3, r3
 410 024c 1846     		mov	r0, r3
 411 024e FFF7FEFF 		bl	__aeabi_i2f
 412 0252 0246     		mov	r2, r0
 413 0254 FB6A     		ldr	r3, [r7, #44]
 414 0256 4FEA8303 		lsl	r3, r3, #2
 415 025a 07F13001 		add	r1, r7, #48
 416 025e CB18     		adds	r3, r1, r3
 417 0260 53F8183C 		ldr	r3, [r3, #-24]	@ float
 418 0264 1046     		mov	r0, r2
 419 0266 1946     		mov	r1, r3
 420 0268 FFF7FEFF 		bl	__aeabi_fsub
 421 026c 0346     		mov	r3, r0
 422 026e 1846     		mov	r0, r3
 423 0270 FFF7FEFF 		bl	__aeabi_f2uiz
 424 0274 0346     		mov	r3, r0
 425 0276 99B2     		uxth	r1, r3
 426 0278 154B     		ldr	r3, .L21+8
 427 027a FA6A     		ldr	r2, [r7, #44]
 428 027c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
  52:../calculations.c **** 		clearValues.torqueVector[countEx] -= gravityForceTorqueVector[countEx];
 429              		.loc 1 52 0 discriminator 2
 430 0280 134A     		ldr	r2, .L21+8
 431 0282 FB6A     		ldr	r3, [r7, #44]
 432 0284 4FEA4303 		lsl	r3, r3, #1
 433 0288 D318     		adds	r3, r2, r3
 434 028a DB88     		ldrh	r3, [r3, #6]	@ movhi
 435 028c 9AB2     		uxth	r2, r3
 436 028e FB6A     		ldr	r3, [r7, #44]
 437 0290 4FEA4303 		lsl	r3, r3, #1
 438 0294 07F13001 		add	r1, r7, #48
 439 0298 CB18     		adds	r3, r1, r3
 440 029a 33F82C3C 		ldrh	r3, [r3, #-44]
 441 029e 9BB2     		uxth	r3, r3
 442 02a0 D31A     		subs	r3, r2, r3
 443 02a2 9AB2     		uxth	r2, r3
 444 02a4 0A49     		ldr	r1, .L21+8
 445 02a6 FB6A     		ldr	r3, [r7, #44]
 446 02a8 4FEA4303 		lsl	r3, r3, #1
 447 02ac CB18     		adds	r3, r1, r3
 448 02ae DA80     		strh	r2, [r3, #6]	@ movhi
  49:../calculations.c **** 	for(countEx = 0; countEx < 3; countEx++)
 449              		.loc 1 49 0 discriminator 2
 450 02b0 FB6A     		ldr	r3, [r7, #44]
 451 02b2 03F10103 		add	r3, r3, #1
 452 02b6 FB62     		str	r3, [r7, #44]
 453              	.L19:
  49:../calculations.c **** 	for(countEx = 0; countEx < 3; countEx++)
 454              		.loc 1 49 0 is_stmt 0 discriminator 1
 455 02b8 FB6A     		ldr	r3, [r7, #44]
 456 02ba 022B     		cmp	r3, #2
 457 02bc C1DD     		ble	.L20
  53:../calculations.c **** 	}
  54:../calculations.c **** 
  55:../calculations.c **** }
 458              		.loc 1 55 0 is_stmt 1
 459 02be 07F13007 		add	r7, r7, #48
 460 02c2 BD46     		mov	sp, r7
 461 02c4 B0BD     		pop	{r4, r5, r7, pc}
 462              	.L22:
 463 02c6 00BF     		.align	2
 464              	.L21:
 465 02c8 00000000 		.word	rotationMatrix
 466 02cc 00000000 		.word	ToolProperties
 467 02d0 00000000 		.word	clearValues
 468 02d4 00000000 		.word	0
 469              		.cfi_endproc
 470              	.LFE30:
 472              	.Letext0:
 473              		.file 2 "/opt/codesourcery/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eab
 474              		.file 3 "../globals.h"
 475              		.file 4 "/home/dzusan/workspace/sensitizer_probe/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 calculations.c
                            *COM*:0000000c sensorValues
                            *COM*:00000012 rotationMatrix
                            *COM*:0000000c clearValues
     /tmp/cckrJ0jP.s:26     .bss:00000000 rxCount
     /tmp/cckrJ0jP.s:23     .bss:00000000 $d
     /tmp/cckrJ0jP.s:33     .rodata:00000000 START_RX_BYTE
     /tmp/cckrJ0jP.s:30     .rodata:00000000 $d
     /tmp/cckrJ0jP.s:39     .rodata:00000004 rxSeq
     /tmp/cckrJ0jP.s:61     .bss:00000004 txCount
     /tmp/cckrJ0jP.s:68     .rodata:00000044 START_TX_BYTE
     /tmp/cckrJ0jP.s:74     .rodata:00000048 txSeq
                            *COM*:0000000c ToolProperties
     /tmp/cckrJ0jP.s:87     .text:00000000 $t
     /tmp/cckrJ0jP.s:92     .text:00000000 typeConversion
     /tmp/cckrJ0jP.s:170    .text:00000070 $d
     /tmp/cckrJ0jP.s:181    .text:0000007c $t
     /tmp/cckrJ0jP.s:186    .text:0000007c Calculations
     /tmp/cckrJ0jP.s:465    .text:000002c8 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.f2b32ee49e703f71d2941adfc5f04874
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.9a9f642c8c562acb4a63ad5d933b7c01
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.6e7f2924f39c60c10815105b99b8b446
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.968bcf08d813e68e57c280a4da69fa5a
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.globals.h.35.040b4f98c5cb3530846e382e0d62af6d

UNDEFINED SYMBOLS
__aeabi_i2f
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_fmul
__aeabi_fadd
__aeabi_fsub
__aeabi_f2iz
__aeabi_f2uiz
