   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"calculations.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	txSeq,28,4
  19              		.global	__aeabi_i2f
  20              		.global	__aeabi_fcmpgt
  21              		.global	__aeabi_fcmplt
  22              		.align	2
  23              		.global	typeConversion
  24              		.thumb
  25              		.thumb_func
  27              	typeConversion:
  28              	.LFB0:
  29              		.file 1 "../calculations.c"
   1:../calculations.c **** /*
   2:../calculations.c ****  * calculations.c
   3:../calculations.c ****  *
   4:../calculations.c ****  *  Created on: 23.12.2012
   5:../calculations.c ****  *      Author: dzusan
   6:../calculations.c ****  */
   7:../calculations.c **** 
   8:../calculations.c **** #include "calculations.h"
   9:../calculations.c **** 
  10:../calculations.c **** float typeConversion(uint16_t input)
  11:../calculations.c **** {
  30              		.loc 1 11 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 0346     		mov	r3, r0
  46 0008 FB80     		strh	r3, [r7, #6]	@ movhi
  12:../calculations.c **** 	float tmp;
  13:../calculations.c **** 	tmp = (float)((input & 0b0011111111111111)/10000);
  47              		.loc 1 13 0
  48 000a FB88     		ldrh	r3, [r7, #6]
  49 000c 4FEA8343 		lsl	r3, r3, #18
  50 0010 4FEA9343 		lsr	r3, r3, #18
  51 0014 164A     		ldr	r2, .L12
  52 0016 82FB0312 		smull	r1, r2, r2, r3
  53 001a 4FEA2232 		asr	r2, r2, #12
  54 001e 4FEAE373 		asr	r3, r3, #31
  55 0022 D31A     		subs	r3, r2, r3
  56 0024 1846     		mov	r0, r3
  57 0026 FFF7FEFF 		bl	__aeabi_i2f
  58 002a 0346     		mov	r3, r0
  59 002c FB60     		str	r3, [r7, #12]	@ float
  14:../calculations.c **** 	if(input & 0b1000000000000000) tmp *= -1;
  60              		.loc 1 14 0
  61 002e FB88     		ldrh	r3, [r7, #6]
  62 0030 1BB2     		sxth	r3, r3
  63 0032 002B     		cmp	r3, #0
  64 0034 03DA     		bge	.L2
  65              		.loc 1 14 0 is_stmt 0 discriminator 1
  66 0036 FB68     		ldr	r3, [r7, #12]
  67 0038 83F00043 		eor	r3, r3, #-2147483648
  68 003c FB60     		str	r3, [r7, #12]	@ float
  69              	.L2:
  15:../calculations.c **** 	if(tmp > 1)  return  1;
  70              		.loc 1 15 0 is_stmt 1
  71 003e F868     		ldr	r0, [r7, #12]	@ float
  72 0040 0C49     		ldr	r1, .L12+4	@ float
  73 0042 FFF7FEFF 		bl	__aeabi_fcmpgt
  74 0046 0346     		mov	r3, r0
  75 0048 002B     		cmp	r3, #0
  76 004a 01D0     		beq	.L10
  77              	.L8:
  78              		.loc 1 15 0 is_stmt 0 discriminator 1
  79 004c 094B     		ldr	r3, .L12+4	@ float
  80 004e 09E0     		b	.L5
  81              	.L10:
  16:../calculations.c **** 	if(tmp < -1) return -1;
  82              		.loc 1 16 0 is_stmt 1
  83 0050 F868     		ldr	r0, [r7, #12]	@ float
  84 0052 0949     		ldr	r1, .L12+8	@ float
  85 0054 FFF7FEFF 		bl	__aeabi_fcmplt
  86 0058 0346     		mov	r3, r0
  87 005a 002B     		cmp	r3, #0
  88 005c 01D0     		beq	.L11
  89              	.L9:
  90              		.loc 1 16 0 is_stmt 0 discriminator 1
  91 005e 064B     		ldr	r3, .L12+8	@ float
  92 0060 00E0     		b	.L5
  93              	.L11:
  17:../calculations.c **** 	return tmp;
  94              		.loc 1 17 0 is_stmt 1
  95 0062 FB68     		ldr	r3, [r7, #12]	@ float
  96              	.L5:
  18:../calculations.c **** }
  97              		.loc 1 18 0
  98 0064 1846     		mov	r0, r3
  99 0066 07F11007 		add	r7, r7, #16
 100 006a BD46     		mov	sp, r7
 101 006c 80BD     		pop	{r7, pc}
 102              	.L13:
 103 006e 00BF     		.align	2
 104              	.L12:
 105 0070 AD8BDB68 		.word	1759218605
 106 0074 0000803F 		.word	1065353216
 107 0078 000080BF 		.word	-1082130432
 108              		.cfi_endproc
 109              	.LFE0:
 111              		.global	__aeabi_fmul
 112              		.global	__aeabi_fadd
 113              		.global	__aeabi_fsub
 114              		.global	__aeabi_f2iz
 115              		.global	__aeabi_f2uiz
 116              		.align	2
 117              		.global	Calculations
 118              		.thumb
 119              		.thumb_func
 121              	Calculations:
 122              	.LFB1:
  19:../calculations.c **** 
  20:../calculations.c **** void Calculations(void)
  21:../calculations.c **** {
 123              		.loc 1 21 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 48
 126              		@ frame_needed = 1, uses_anonymous_args = 0
 127 007c B0B5     		push	{r4, r5, r7, lr}
 128              	.LCFI3:
 129              		.cfi_def_cfa_offset 16
 130              		.cfi_offset 4, -16
 131              		.cfi_offset 5, -12
 132              		.cfi_offset 7, -8
 133              		.cfi_offset 14, -4
 134 007e 8CB0     		sub	sp, sp, #48
 135              	.LCFI4:
 136              		.cfi_def_cfa_offset 64
 137 0080 00AF     		add	r7, sp, #0
 138              	.LCFI5:
 139              		.cfi_def_cfa_register 7
  22:../calculations.c **** 	int countEx, countIn, countSum;
  23:../calculations.c **** 
  24:../calculations.c **** 	float tmpCoordinateGravityForceVector[3] = {0, 0, 0};
 140              		.loc 1 24 0
 141 0082 954B     		ldr	r3, .L21+16	@ float
 142 0084 BB61     		str	r3, [r7, #24]	@ float
 143 0086 944B     		ldr	r3, .L21+16	@ float
 144 0088 FB61     		str	r3, [r7, #28]	@ float
 145 008a 934B     		ldr	r3, .L21+16	@ float
 146 008c 3B62     		str	r3, [r7, #32]	@ float
  25:../calculations.c **** 	float tmpCoordinateCMVector[3] = {0, 0, 0};
 147              		.loc 1 25 0
 148 008e 924B     		ldr	r3, .L21+16	@ float
 149 0090 FB60     		str	r3, [r7, #12]	@ float
 150 0092 914B     		ldr	r3, .L21+16	@ float
 151 0094 3B61     		str	r3, [r7, #16]	@ float
 152 0096 904B     		ldr	r3, .L21+16	@ float
 153 0098 7B61     		str	r3, [r7, #20]	@ float
  26:../calculations.c **** 
  27:../calculations.c **** 	/*Vector rotation:
  28:../calculations.c **** 	 *[totalRotationMatrix X gravityForceVector]
  29:../calculations.c **** 	 *[totalRotationMatrix X CMVector]*/
  30:../calculations.c **** 
  31:../calculations.c **** 	for(countIn = 0; countIn < 3; countIn++)
 154              		.loc 1 31 0
 155 009a 4FF00003 		mov	r3, #0
 156 009e BB62     		str	r3, [r7, #40]
 157 00a0 7AE0     		b	.L15
 158              	.L18:
  32:../calculations.c **** 		for(countSum = 0; countSum < 3; countSum++)
 159              		.loc 1 32 0
 160 00a2 4FF00003 		mov	r3, #0
 161 00a6 7B62     		str	r3, [r7, #36]
 162 00a8 6FE0     		b	.L16
 163              	.L17:
  33:../calculations.c **** 		{
  34:../calculations.c **** 			tmpCoordinateGravityForceVector[countIn] += typeConversion(rotationMatrix[countIn][countSum]) * 
 164              		.loc 1 34 0 discriminator 2
 165 00aa BB6A     		ldr	r3, [r7, #40]
 166 00ac 4FEA8303 		lsl	r3, r3, #2
 167 00b0 07F13001 		add	r1, r7, #48
 168 00b4 CB18     		adds	r3, r1, r3
 169 00b6 53F8184C 		ldr	r4, [r3, #-24]	@ float
 170 00ba 8349     		ldr	r1, .L21
 171 00bc BA6A     		ldr	r2, [r7, #40]
 172 00be 1346     		mov	r3, r2
 173 00c0 4FEA4303 		lsl	r3, r3, #1
 174 00c4 9B18     		adds	r3, r3, r2
 175 00c6 7A6A     		ldr	r2, [r7, #36]
 176 00c8 9B18     		adds	r3, r3, r2
 177 00ca 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ movhi
 178 00ce 9BB2     		uxth	r3, r3
 179 00d0 9BB2     		uxth	r3, r3
 180 00d2 1846     		mov	r0, r3
 181 00d4 FFF7FEFF 		bl	typeConversion
 182 00d8 0546     		mov	r5, r0
 183 00da 7C4B     		ldr	r3, .L21+4
 184 00dc 7A6A     		ldr	r2, [r7, #36]
 185 00de 33F81230 		ldrh	r3, [r3, r2, lsl #1]	@ movhi
 186 00e2 9BB2     		uxth	r3, r3
 187 00e4 1BB2     		sxth	r3, r3
 188 00e6 1846     		mov	r0, r3
 189 00e8 FFF7FEFF 		bl	__aeabi_i2f
 190 00ec 0346     		mov	r3, r0
 191 00ee 2846     		mov	r0, r5
 192 00f0 1946     		mov	r1, r3
 193 00f2 FFF7FEFF 		bl	__aeabi_fmul
 194 00f6 0346     		mov	r3, r0
 195 00f8 2046     		mov	r0, r4
 196 00fa 1946     		mov	r1, r3
 197 00fc FFF7FEFF 		bl	__aeabi_fadd
 198 0100 0346     		mov	r3, r0
 199 0102 1A46     		mov	r2, r3
 200 0104 BB6A     		ldr	r3, [r7, #40]
 201 0106 4FEA8303 		lsl	r3, r3, #2
 202 010a 07F13001 		add	r1, r7, #48
 203 010e CB18     		adds	r3, r1, r3
 204 0110 43F8182C 		str	r2, [r3, #-24]	@ float
  35:../calculations.c **** 			tmpCoordinateCMVector[countIn]           += typeConversion(rotationMatrix[countIn][countSum]) * 
 205              		.loc 1 35 0 discriminator 2
 206 0114 BB6A     		ldr	r3, [r7, #40]
 207 0116 4FEA8303 		lsl	r3, r3, #2
 208 011a 07F13002 		add	r2, r7, #48
 209 011e D318     		adds	r3, r2, r3
 210 0120 53F8244C 		ldr	r4, [r3, #-36]	@ float
 211 0124 6849     		ldr	r1, .L21
 212 0126 BA6A     		ldr	r2, [r7, #40]
 213 0128 1346     		mov	r3, r2
 214 012a 4FEA4303 		lsl	r3, r3, #1
 215 012e 9B18     		adds	r3, r3, r2
 216 0130 7A6A     		ldr	r2, [r7, #36]
 217 0132 9B18     		adds	r3, r3, r2
 218 0134 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ movhi
 219 0138 9BB2     		uxth	r3, r3
 220 013a 9BB2     		uxth	r3, r3
 221 013c 1846     		mov	r0, r3
 222 013e FFF7FEFF 		bl	typeConversion
 223 0142 0546     		mov	r5, r0
 224 0144 614A     		ldr	r2, .L21+4
 225 0146 7B6A     		ldr	r3, [r7, #36]
 226 0148 4FEA4303 		lsl	r3, r3, #1
 227 014c D318     		adds	r3, r2, r3
 228 014e DB88     		ldrh	r3, [r3, #6]	@ movhi
 229 0150 9BB2     		uxth	r3, r3
 230 0152 1BB2     		sxth	r3, r3
 231 0154 1846     		mov	r0, r3
 232 0156 FFF7FEFF 		bl	__aeabi_i2f
 233 015a 0346     		mov	r3, r0
 234 015c 2846     		mov	r0, r5
 235 015e 1946     		mov	r1, r3
 236 0160 FFF7FEFF 		bl	__aeabi_fmul
 237 0164 0346     		mov	r3, r0
 238 0166 2046     		mov	r0, r4
 239 0168 1946     		mov	r1, r3
 240 016a FFF7FEFF 		bl	__aeabi_fadd
 241 016e 0346     		mov	r3, r0
 242 0170 1A46     		mov	r2, r3
 243 0172 BB6A     		ldr	r3, [r7, #40]
 244 0174 4FEA8303 		lsl	r3, r3, #2
 245 0178 07F13001 		add	r1, r7, #48
 246 017c CB18     		adds	r3, r1, r3
 247 017e 43F8242C 		str	r2, [r3, #-36]	@ float
  32:../calculations.c **** 		for(countSum = 0; countSum < 3; countSum++)
 248              		.loc 1 32 0 discriminator 2
 249 0182 7B6A     		ldr	r3, [r7, #36]
 250 0184 03F10103 		add	r3, r3, #1
 251 0188 7B62     		str	r3, [r7, #36]
 252              	.L16:
  32:../calculations.c **** 		for(countSum = 0; countSum < 3; countSum++)
 253              		.loc 1 32 0 is_stmt 0 discriminator 1
 254 018a 7B6A     		ldr	r3, [r7, #36]
 255 018c 022B     		cmp	r3, #2
 256 018e 8CDD     		ble	.L17
  31:../calculations.c **** 	for(countIn = 0; countIn < 3; countIn++)
 257              		.loc 1 31 0 is_stmt 1
 258 0190 BB6A     		ldr	r3, [r7, #40]
 259 0192 03F10103 		add	r3, r3, #1
 260 0196 BB62     		str	r3, [r7, #40]
 261              	.L15:
  31:../calculations.c **** 	for(countIn = 0; countIn < 3; countIn++)
 262              		.loc 1 31 0 is_stmt 0 discriminator 1
 263 0198 BB6A     		ldr	r3, [r7, #40]
 264 019a 022B     		cmp	r3, #2
 265 019c 81DD     		ble	.L18
  36:../calculations.c **** 		}
  37:../calculations.c **** 
  38:../calculations.c **** 	/*Gravity force torque:
  39:../calculations.c **** 	 *[CMVector X  gravityForceVector]*/
  40:../calculations.c **** 
  41:../calculations.c **** 	int16_t gravityForceTorqueVector[3];
  42:../calculations.c **** 	gravityForceTorqueVector[0] = tmpCoordinateCMVector[1] * tmpCoordinateGravityForceVector[2] - tmpC
 266              		.loc 1 42 0 is_stmt 1
 267 019e 3A69     		ldr	r2, [r7, #16]	@ float
 268 01a0 3B6A     		ldr	r3, [r7, #32]	@ float
 269 01a2 1046     		mov	r0, r2
 270 01a4 1946     		mov	r1, r3
 271 01a6 FFF7FEFF 		bl	__aeabi_fmul
 272 01aa 0346     		mov	r3, r0
 273 01ac 1C46     		mov	r4, r3
 274 01ae 7A69     		ldr	r2, [r7, #20]	@ float
 275 01b0 FB69     		ldr	r3, [r7, #28]	@ float
 276 01b2 1046     		mov	r0, r2
 277 01b4 1946     		mov	r1, r3
 278 01b6 FFF7FEFF 		bl	__aeabi_fmul
 279 01ba 0346     		mov	r3, r0
 280 01bc 2046     		mov	r0, r4
 281 01be 1946     		mov	r1, r3
 282 01c0 FFF7FEFF 		bl	__aeabi_fsub
 283 01c4 0346     		mov	r3, r0
 284 01c6 1846     		mov	r0, r3
 285 01c8 FFF7FEFF 		bl	__aeabi_f2iz
 286 01cc 0346     		mov	r3, r0
 287 01ce 9BB2     		uxth	r3, r3
 288 01d0 BB80     		strh	r3, [r7, #4]	@ movhi
  43:../calculations.c **** 	gravityForceTorqueVector[1] = tmpCoordinateCMVector[2] * tmpCoordinateGravityForceVector[0] - tmpC
 289              		.loc 1 43 0
 290 01d2 7A69     		ldr	r2, [r7, #20]	@ float
 291 01d4 BB69     		ldr	r3, [r7, #24]	@ float
 292 01d6 1046     		mov	r0, r2
 293 01d8 1946     		mov	r1, r3
 294 01da FFF7FEFF 		bl	__aeabi_fmul
 295 01de 0346     		mov	r3, r0
 296 01e0 1C46     		mov	r4, r3
 297 01e2 FA68     		ldr	r2, [r7, #12]	@ float
 298 01e4 3B6A     		ldr	r3, [r7, #32]	@ float
 299 01e6 1046     		mov	r0, r2
 300 01e8 1946     		mov	r1, r3
 301 01ea FFF7FEFF 		bl	__aeabi_fmul
 302 01ee 0346     		mov	r3, r0
 303 01f0 2046     		mov	r0, r4
 304 01f2 1946     		mov	r1, r3
 305 01f4 FFF7FEFF 		bl	__aeabi_fsub
 306 01f8 0346     		mov	r3, r0
 307 01fa 1846     		mov	r0, r3
 308 01fc FFF7FEFF 		bl	__aeabi_f2iz
 309 0200 0346     		mov	r3, r0
 310 0202 9BB2     		uxth	r3, r3
 311 0204 FB80     		strh	r3, [r7, #6]	@ movhi
  44:../calculations.c **** 	gravityForceTorqueVector[2] = tmpCoordinateCMVector[0] * tmpCoordinateGravityForceVector[1] - tmpC
 312              		.loc 1 44 0
 313 0206 FA68     		ldr	r2, [r7, #12]	@ float
 314 0208 FB69     		ldr	r3, [r7, #28]	@ float
 315 020a 1046     		mov	r0, r2
 316 020c 1946     		mov	r1, r3
 317 020e FFF7FEFF 		bl	__aeabi_fmul
 318 0212 0346     		mov	r3, r0
 319 0214 1C46     		mov	r4, r3
 320 0216 3A69     		ldr	r2, [r7, #16]	@ float
 321 0218 BB69     		ldr	r3, [r7, #24]	@ float
 322 021a 1046     		mov	r0, r2
 323 021c 1946     		mov	r1, r3
 324 021e FFF7FEFF 		bl	__aeabi_fmul
 325 0222 0346     		mov	r3, r0
 326 0224 2046     		mov	r0, r4
 327 0226 1946     		mov	r1, r3
 328 0228 FFF7FEFF 		bl	__aeabi_fsub
 329 022c 0346     		mov	r3, r0
 330 022e 1846     		mov	r0, r3
 331 0230 FFF7FEFF 		bl	__aeabi_f2iz
 332 0234 0346     		mov	r3, r0
 333 0236 9BB2     		uxth	r3, r3
 334 0238 3B81     		strh	r3, [r7, #8]	@ movhi
  45:../calculations.c **** 
  46:../calculations.c **** 	/*Subtraction*/
  47:../calculations.c **** 
  48:../calculations.c **** 	for(countEx = 0; countEx < 3; countEx++)
 335              		.loc 1 48 0
 336 023a 4FF00003 		mov	r3, #0
 337 023e FB62     		str	r3, [r7, #44]
 338 0240 3AE0     		b	.L19
 339              	.L20:
  49:../calculations.c **** 	{
  50:../calculations.c **** 		clearValues.forceVector[countEx]  = sensorValues.forceVector[countEx]  - tmpCoordinateGravityForc
 340              		.loc 1 50 0 discriminator 2
 341 0242 234B     		ldr	r3, .L21+8
 342 0244 FA6A     		ldr	r2, [r7, #44]
 343 0246 33F81230 		ldrh	r3, [r3, r2, lsl #1]	@ movhi
 344 024a 9BB2     		uxth	r3, r3
 345 024c 1846     		mov	r0, r3
 346 024e FFF7FEFF 		bl	__aeabi_i2f
 347 0252 0246     		mov	r2, r0
 348 0254 FB6A     		ldr	r3, [r7, #44]
 349 0256 4FEA8303 		lsl	r3, r3, #2
 350 025a 07F13001 		add	r1, r7, #48
 351 025e CB18     		adds	r3, r1, r3
 352 0260 53F8183C 		ldr	r3, [r3, #-24]	@ float
 353 0264 1046     		mov	r0, r2
 354 0266 1946     		mov	r1, r3
 355 0268 FFF7FEFF 		bl	__aeabi_fsub
 356 026c 0346     		mov	r3, r0
 357 026e 1846     		mov	r0, r3
 358 0270 FFF7FEFF 		bl	__aeabi_f2uiz
 359 0274 0346     		mov	r3, r0
 360 0276 99B2     		uxth	r1, r3
 361 0278 164B     		ldr	r3, .L21+12
 362 027a FA6A     		ldr	r2, [r7, #44]
 363 027c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
  51:../calculations.c **** 		clearValues.torqueVector[countEx] = sensorValues.torqueVector[countEx] - gravityForceTorqueVector
 364              		.loc 1 51 0 discriminator 2
 365 0280 134A     		ldr	r2, .L21+8
 366 0282 FB6A     		ldr	r3, [r7, #44]
 367 0284 4FEA4303 		lsl	r3, r3, #1
 368 0288 D318     		adds	r3, r2, r3
 369 028a DB88     		ldrh	r3, [r3, #6]	@ movhi
 370 028c 9AB2     		uxth	r2, r3
 371 028e FB6A     		ldr	r3, [r7, #44]
 372 0290 4FEA4303 		lsl	r3, r3, #1
 373 0294 07F13001 		add	r1, r7, #48
 374 0298 CB18     		adds	r3, r1, r3
 375 029a 33F82C3C 		ldrh	r3, [r3, #-44]
 376 029e 9BB2     		uxth	r3, r3
 377 02a0 D31A     		subs	r3, r2, r3
 378 02a2 9AB2     		uxth	r2, r3
 379 02a4 0B49     		ldr	r1, .L21+12
 380 02a6 FB6A     		ldr	r3, [r7, #44]
 381 02a8 4FEA4303 		lsl	r3, r3, #1
 382 02ac CB18     		adds	r3, r1, r3
 383 02ae DA80     		strh	r2, [r3, #6]	@ movhi
  48:../calculations.c **** 	for(countEx = 0; countEx < 3; countEx++)
 384              		.loc 1 48 0 discriminator 2
 385 02b0 FB6A     		ldr	r3, [r7, #44]
 386 02b2 03F10103 		add	r3, r3, #1
 387 02b6 FB62     		str	r3, [r7, #44]
 388              	.L19:
  48:../calculations.c **** 	for(countEx = 0; countEx < 3; countEx++)
 389              		.loc 1 48 0 is_stmt 0 discriminator 1
 390 02b8 FB6A     		ldr	r3, [r7, #44]
 391 02ba 022B     		cmp	r3, #2
 392 02bc C1DD     		ble	.L20
  52:../calculations.c **** 	}
  53:../calculations.c **** 
  54:../calculations.c **** }
 393              		.loc 1 54 0 is_stmt 1
 394 02be 07F13007 		add	r7, r7, #48
 395 02c2 BD46     		mov	sp, r7
 396 02c4 B0BD     		pop	{r4, r5, r7, pc}
 397              	.L22:
 398 02c6 00BF     		.align	2
 399              	.L21:
 400 02c8 00000000 		.word	rotationMatrix
 401 02cc 00000000 		.word	ToolProperties
 402 02d0 00000000 		.word	sensorValues
 403 02d4 00000000 		.word	clearValues
 404 02d8 00000000 		.word	0
 405              		.cfi_endproc
 406              	.LFE1:
 408              	.Letext0:
 409              		.file 2 "/opt/codesourcery/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eab
 410              		.file 3 "../utils.h"
DEFINED SYMBOLS
                            *ABS*:00000000 calculations.c
                            *COM*:0000001c txSeq
     /tmp/ccglCj85.s:22     .text:00000000 $t
     /tmp/ccglCj85.s:27     .text:00000000 typeConversion
     /tmp/ccglCj85.s:105    .text:00000070 $d
     /tmp/ccglCj85.s:116    .text:0000007c $t
     /tmp/ccglCj85.s:121    .text:0000007c Calculations
     /tmp/ccglCj85.s:400    .text:000002c8 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.f2b32ee49e703f71d2941adfc5f04874
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.utils.h.36.831e31bce070b14e68f1d865f43c4b9d

UNDEFINED SYMBOLS
__aeabi_i2f
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_fmul
__aeabi_fadd
__aeabi_fsub
__aeabi_f2iz
__aeabi_f2uiz
rotationMatrix
ToolProperties
sensorValues
clearValues
