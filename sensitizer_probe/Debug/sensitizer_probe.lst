
sensitizer_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c14  0800010c  0800010c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.attributes 00000031  08002d20  08002d20  00010014  2**0
                  CONTENTS, READONLY
  3 .data         00000014  20000000  08002fbc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000044  20000014  08002fd0  00010014  2**2
                  ALLOC
  5 ._user_heap_stack 00000100  20000058  08003014  00010014  2**0
                  ALLOC
  6 .debug_info   00003704  00000000  00000000  00010045  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d8b  00000000  00000000  00013749  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001956  00000000  00000000  000144d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000160  00000000  00000000  00015e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0000d4e1  00000000  00000000  00015f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002435  00000000  00000000  00023471  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0004e5bf  00000000  00000000  000258a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000030  00000000  00000000  00073e65  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000ddc  00000000  00000000  00073e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  00074c78  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800010c:	b480      	push	{r7}
 800010e:	b083      	sub	sp, #12
 8000110:	af00      	add	r7, sp, #0
 8000112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000114:	4a05      	ldr	r2, [pc, #20]	; (800012c <NVIC_PriorityGroupConfig+0x20>)
 8000116:	687b      	ldr	r3, [r7, #4]
 8000118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800011c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000120:	60d3      	str	r3, [r2, #12]
}
 8000122:	f107 070c 	add.w	r7, r7, #12
 8000126:	46bd      	mov	sp, r7
 8000128:	bc80      	pop	{r7}
 800012a:	4770      	bx	lr
 800012c:	e000ed00 	.word	0xe000ed00

08000130 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000130:	b480      	push	{r7}
 8000132:	b087      	sub	sp, #28
 8000134:	af00      	add	r7, sp, #0
 8000136:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000138:	f04f 0300 	mov.w	r3, #0
 800013c:	617b      	str	r3, [r7, #20]
 800013e:	f04f 0300 	mov.w	r3, #0
 8000142:	613b      	str	r3, [r7, #16]
 8000144:	f04f 030f 	mov.w	r3, #15
 8000148:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800014a:	687b      	ldr	r3, [r7, #4]
 800014c:	78db      	ldrb	r3, [r3, #3]
 800014e:	2b00      	cmp	r3, #0
 8000150:	d03d      	beq.n	80001ce <NVIC_Init+0x9e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000152:	4b2a      	ldr	r3, [pc, #168]	; (80001fc <NVIC_Init+0xcc>)
 8000154:	68db      	ldr	r3, [r3, #12]
 8000156:	ea6f 0303 	mvn.w	r3, r3
 800015a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800015e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000162:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000164:	697b      	ldr	r3, [r7, #20]
 8000166:	f1c3 0304 	rsb	r3, r3, #4
 800016a:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800016c:	697b      	ldr	r3, [r7, #20]
 800016e:	68fa      	ldr	r2, [r7, #12]
 8000170:	fa22 f303 	lsr.w	r3, r2, r3
 8000174:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	785b      	ldrb	r3, [r3, #1]
 800017a:	461a      	mov	r2, r3
 800017c:	693b      	ldr	r3, [r7, #16]
 800017e:	fa02 f303 	lsl.w	r3, r2, r3
 8000182:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	789b      	ldrb	r3, [r3, #2]
 8000188:	461a      	mov	r2, r3
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	4013      	ands	r3, r2
 800018e:	697a      	ldr	r2, [r7, #20]
 8000190:	4313      	orrs	r3, r2
 8000192:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000194:	697b      	ldr	r3, [r7, #20]
 8000196:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800019a:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800019c:	4918      	ldr	r1, [pc, #96]	; (8000200 <NVIC_Init+0xd0>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	697a      	ldr	r2, [r7, #20]
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	18cb      	adds	r3, r1, r3
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ac:	4b14      	ldr	r3, [pc, #80]	; (8000200 <NVIC_Init+0xd0>)
 80001ae:	687a      	ldr	r2, [r7, #4]
 80001b0:	7812      	ldrb	r2, [r2, #0]
 80001b2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80001b6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001b8:	6879      	ldr	r1, [r7, #4]
 80001ba:	7809      	ldrb	r1, [r1, #0]
 80001bc:	f001 011f 	and.w	r1, r1, #31
 80001c0:	f04f 0001 	mov.w	r0, #1
 80001c4:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80001cc:	e011      	b.n	80001f2 <NVIC_Init+0xc2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ce:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <NVIC_Init+0xd0>)
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	7812      	ldrb	r2, [r2, #0]
 80001d4:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80001d8:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001da:	6879      	ldr	r1, [r7, #4]
 80001dc:	7809      	ldrb	r1, [r1, #0]
 80001de:	f001 011f 	and.w	r1, r1, #31
 80001e2:	f04f 0001 	mov.w	r0, #1
 80001e6:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ea:	f102 0220 	add.w	r2, r2, #32
 80001ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80001f2:	f107 071c 	add.w	r7, r7, #28
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00
 8000200:	e000e100 	.word	0xe000e100

08000204 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800020e:	4a07      	ldr	r2, [pc, #28]	; (800022c <NVIC_SetVectorTable+0x28>)
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000216:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800021a:	6879      	ldr	r1, [r7, #4]
 800021c:	430b      	orrs	r3, r1
 800021e:	6093      	str	r3, [r2, #8]
}
 8000220:	f107 070c 	add.w	r7, r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	e000ed00 	.word	0xe000ed00

08000230 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4602      	mov	r2, r0
 8000238:	460b      	mov	r3, r1
 800023a:	71fa      	strb	r2, [r7, #7]
 800023c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800023e:	79bb      	ldrb	r3, [r7, #6]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d006      	beq.n	8000252 <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <NVIC_SystemLPConfig+0x3c>)
 8000246:	4a09      	ldr	r2, [pc, #36]	; (800026c <NVIC_SystemLPConfig+0x3c>)
 8000248:	6911      	ldr	r1, [r2, #16]
 800024a:	79fa      	ldrb	r2, [r7, #7]
 800024c:	430a      	orrs	r2, r1
 800024e:	611a      	str	r2, [r3, #16]
 8000250:	e007      	b.n	8000262 <NVIC_SystemLPConfig+0x32>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <NVIC_SystemLPConfig+0x3c>)
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <NVIC_SystemLPConfig+0x3c>)
 8000256:	6911      	ldr	r1, [r2, #16]
 8000258:	79fa      	ldrb	r2, [r7, #7]
 800025a:	ea6f 0202 	mvn.w	r2, r2
 800025e:	400a      	ands	r2, r1
 8000260:	611a      	str	r2, [r3, #16]
  }
}
 8000262:	f107 070c 	add.w	r7, r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	e000ed00 	.word	0xe000ed00

08000270 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b04      	cmp	r3, #4
 800027c:	d106      	bne.n	800028c <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <SysTick_CLKSourceConfig+0x34>)
 8000280:	4a08      	ldr	r2, [pc, #32]	; (80002a4 <SysTick_CLKSourceConfig+0x34>)
 8000282:	6812      	ldr	r2, [r2, #0]
 8000284:	f042 0204 	orr.w	r2, r2, #4
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	e005      	b.n	8000298 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <SysTick_CLKSourceConfig+0x34>)
 800028e:	4a05      	ldr	r2, [pc, #20]	; (80002a4 <SysTick_CLKSourceConfig+0x34>)
 8000290:	6812      	ldr	r2, [r2, #0]
 8000292:	f022 0204 	bic.w	r2, r2, #4
 8000296:	601a      	str	r2, [r3, #0]
  }
}
 8000298:	f107 070c 	add.w	r7, r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010

080002a8 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4b3c      	ldr	r3, [pc, #240]	; (80003a4 <GPIO_DeInit+0xfc>)
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d10c      	bne.n	80002d2 <GPIO_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80002b8:	f04f 0004 	mov.w	r0, #4
 80002bc:	f04f 0101 	mov.w	r1, #1
 80002c0:	f000 ff66 	bl	8001190 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 80002c4:	f04f 0004 	mov.w	r0, #4
 80002c8:	f04f 0100 	mov.w	r1, #0
 80002cc:	f000 ff60 	bl	8001190 <RCC_APB2PeriphResetCmd>
 80002d0:	e064      	b.n	800039c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	4b34      	ldr	r3, [pc, #208]	; (80003a8 <GPIO_DeInit+0x100>)
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d10c      	bne.n	80002f4 <GPIO_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80002da:	f04f 0008 	mov.w	r0, #8
 80002de:	f04f 0101 	mov.w	r1, #1
 80002e2:	f000 ff55 	bl	8001190 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 80002e6:	f04f 0008 	mov.w	r0, #8
 80002ea:	f04f 0100 	mov.w	r1, #0
 80002ee:	f000 ff4f 	bl	8001190 <RCC_APB2PeriphResetCmd>
 80002f2:	e053      	b.n	800039c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	4b2d      	ldr	r3, [pc, #180]	; (80003ac <GPIO_DeInit+0x104>)
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d10c      	bne.n	8000316 <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80002fc:	f04f 0010 	mov.w	r0, #16
 8000300:	f04f 0101 	mov.w	r1, #1
 8000304:	f000 ff44 	bl	8001190 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8000308:	f04f 0010 	mov.w	r0, #16
 800030c:	f04f 0100 	mov.w	r1, #0
 8000310:	f000 ff3e 	bl	8001190 <RCC_APB2PeriphResetCmd>
 8000314:	e042      	b.n	800039c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <GPIO_DeInit+0x108>)
 800031a:	429a      	cmp	r2, r3
 800031c:	d10c      	bne.n	8000338 <GPIO_DeInit+0x90>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 800031e:	f04f 0020 	mov.w	r0, #32
 8000322:	f04f 0101 	mov.w	r1, #1
 8000326:	f000 ff33 	bl	8001190 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 800032a:	f04f 0020 	mov.w	r0, #32
 800032e:	f04f 0100 	mov.w	r1, #0
 8000332:	f000 ff2d 	bl	8001190 <RCC_APB2PeriphResetCmd>
 8000336:	e031      	b.n	800039c <GPIO_DeInit+0xf4>
  }    
  else if (GPIOx == GPIOE)
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <GPIO_DeInit+0x10c>)
 800033c:	429a      	cmp	r2, r3
 800033e:	d10c      	bne.n	800035a <GPIO_DeInit+0xb2>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8000340:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000344:	f04f 0101 	mov.w	r1, #1
 8000348:	f000 ff22 	bl	8001190 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 800034c:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000350:	f04f 0100 	mov.w	r1, #0
 8000354:	f000 ff1c 	bl	8001190 <RCC_APB2PeriphResetCmd>
 8000358:	e020      	b.n	800039c <GPIO_DeInit+0xf4>
  } 
  else if (GPIOx == GPIOF)
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <GPIO_DeInit+0x110>)
 800035e:	429a      	cmp	r2, r3
 8000360:	d10c      	bne.n	800037c <GPIO_DeInit+0xd4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8000362:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000366:	f04f 0101 	mov.w	r1, #1
 800036a:	f000 ff11 	bl	8001190 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 800036e:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000372:	f04f 0100 	mov.w	r1, #0
 8000376:	f000 ff0b 	bl	8001190 <RCC_APB2PeriphResetCmd>
 800037a:	e00f      	b.n	800039c <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOG)
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <GPIO_DeInit+0x114>)
 8000380:	429a      	cmp	r2, r3
 8000382:	d10b      	bne.n	800039c <GPIO_DeInit+0xf4>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8000384:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000388:	f04f 0101 	mov.w	r1, #1
 800038c:	f000 ff00 	bl	8001190 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8000390:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000394:	f04f 0100 	mov.w	r1, #0
 8000398:	f000 fefa 	bl	8001190 <RCC_APB2PeriphResetCmd>
    }
  }
}
 800039c:	f107 0708 	add.w	r7, r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40010800 	.word	0x40010800
 80003a8:	40010c00 	.word	0x40010c00
 80003ac:	40011000 	.word	0x40011000
 80003b0:	40011400 	.word	0x40011400
 80003b4:	40011800 	.word	0x40011800
 80003b8:	40011c00 	.word	0x40011c00
 80003bc:	40012000 	.word	0x40012000

080003c0 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 80003c4:	f04f 0001 	mov.w	r0, #1
 80003c8:	f04f 0101 	mov.w	r1, #1
 80003cc:	f000 fee0 	bl	8001190 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 80003d0:	f04f 0001 	mov.w	r0, #1
 80003d4:	f04f 0100 	mov.w	r1, #0
 80003d8:	f000 feda 	bl	8001190 <RCC_APB2PeriphResetCmd>
}
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop

080003e0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b089      	sub	sp, #36	; 0x24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80003ea:	f04f 0300 	mov.w	r3, #0
 80003ee:	61fb      	str	r3, [r7, #28]
 80003f0:	f04f 0300 	mov.w	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
 80003f6:	f04f 0300 	mov.w	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
 80003fc:	f04f 0300 	mov.w	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000402:	f04f 0300 	mov.w	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	78db      	ldrb	r3, [r3, #3]
 8000412:	f003 030f 	and.w	r3, r3, #15
 8000416:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	78db      	ldrb	r3, [r3, #3]
 800041c:	f003 0310 	and.w	r3, r3, #16
 8000420:	2b00      	cmp	r3, #0
 8000422:	d004      	beq.n	800042e <GPIO_Init+0x4e>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	789b      	ldrb	r3, [r3, #2]
 8000428:	69fa      	ldr	r2, [r7, #28]
 800042a:	4313      	orrs	r3, r2
 800042c:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	b2db      	uxtb	r3, r3
 8000434:	2b00      	cmp	r3, #0
 8000436:	d04e      	beq.n	80004d6 <GPIO_Init+0xf6>
  {
    tmpreg = GPIOx->CRL;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800043e:	f04f 0300 	mov.w	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
 8000444:	e041      	b.n	80004ca <GPIO_Init+0xea>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000446:	69bb      	ldr	r3, [r7, #24]
 8000448:	f04f 0201 	mov.w	r2, #1
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	881b      	ldrh	r3, [r3, #0]
 8000456:	461a      	mov	r2, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	4013      	ands	r3, r2
 800045c:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800045e:	693a      	ldr	r2, [r7, #16]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	429a      	cmp	r2, r3
 8000464:	d12d      	bne.n	80004c2 <GPIO_Init+0xe2>
      {
        pos = pinpos << 2;
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800046c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	f04f 020f 	mov.w	r2, #15
 8000474:	fa02 f303 	lsl.w	r3, r2, r3
 8000478:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	ea6f 0303 	mvn.w	r3, r3
 8000480:	697a      	ldr	r2, [r7, #20]
 8000482:	4013      	ands	r3, r2
 8000484:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	69fa      	ldr	r2, [r7, #28]
 800048a:	fa02 f303 	lsl.w	r3, r2, r3
 800048e:	697a      	ldr	r2, [r7, #20]
 8000490:	4313      	orrs	r3, r2
 8000492:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	78db      	ldrb	r3, [r3, #3]
 8000498:	2b28      	cmp	r3, #40	; 0x28
 800049a:	d107      	bne.n	80004ac <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	f04f 0201 	mov.w	r2, #1
 80004a2:	fa02 f203 	lsl.w	r2, r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	615a      	str	r2, [r3, #20]
 80004aa:	e00a      	b.n	80004c2 <GPIO_Init+0xe2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	78db      	ldrb	r3, [r3, #3]
 80004b0:	2b48      	cmp	r3, #72	; 0x48
 80004b2:	d106      	bne.n	80004c2 <GPIO_Init+0xe2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80004b4:	69bb      	ldr	r3, [r7, #24]
 80004b6:	f04f 0201 	mov.w	r2, #1
 80004ba:	fa02 f203 	lsl.w	r2, r2, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80004c2:	69bb      	ldr	r3, [r7, #24]
 80004c4:	f103 0301 	add.w	r3, r3, #1
 80004c8:	61bb      	str	r3, [r7, #24]
 80004ca:	69bb      	ldr	r3, [r7, #24]
 80004cc:	2b07      	cmp	r3, #7
 80004ce:	d9ba      	bls.n	8000446 <GPIO_Init+0x66>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	697a      	ldr	r2, [r7, #20]
 80004d4:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	2bff      	cmp	r3, #255	; 0xff
 80004dc:	d953      	bls.n	8000586 <GPIO_Init+0x1a6>
  {
    tmpreg = GPIOx->CRH;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80004e4:	f04f 0300 	mov.w	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
 80004ea:	e046      	b.n	800057a <GPIO_Init+0x19a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80004ec:	69bb      	ldr	r3, [r7, #24]
 80004ee:	f103 0308 	add.w	r3, r3, #8
 80004f2:	f04f 0201 	mov.w	r2, #1
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
 80004fa:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	461a      	mov	r2, r3
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	4013      	ands	r3, r2
 8000506:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000508:	693a      	ldr	r2, [r7, #16]
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	429a      	cmp	r2, r3
 800050e:	d130      	bne.n	8000572 <GPIO_Init+0x192>
      {
        pos = pinpos << 2;
 8000510:	69bb      	ldr	r3, [r7, #24]
 8000512:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000516:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f04f 020f 	mov.w	r2, #15
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	ea6f 0303 	mvn.w	r3, r3
 800052a:	697a      	ldr	r2, [r7, #20]
 800052c:	4013      	ands	r3, r2
 800052e:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	69fa      	ldr	r2, [r7, #28]
 8000534:	fa02 f303 	lsl.w	r3, r2, r3
 8000538:	697a      	ldr	r2, [r7, #20]
 800053a:	4313      	orrs	r3, r2
 800053c:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	78db      	ldrb	r3, [r3, #3]
 8000542:	2b28      	cmp	r3, #40	; 0x28
 8000544:	d108      	bne.n	8000558 <GPIO_Init+0x178>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000546:	69bb      	ldr	r3, [r7, #24]
 8000548:	f103 0308 	add.w	r3, r3, #8
 800054c:	f04f 0201 	mov.w	r2, #1
 8000550:	fa02 f203 	lsl.w	r2, r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	78db      	ldrb	r3, [r3, #3]
 800055c:	2b48      	cmp	r3, #72	; 0x48
 800055e:	d108      	bne.n	8000572 <GPIO_Init+0x192>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	f103 0308 	add.w	r3, r3, #8
 8000566:	f04f 0201 	mov.w	r2, #1
 800056a:	fa02 f203 	lsl.w	r2, r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000572:	69bb      	ldr	r3, [r7, #24]
 8000574:	f103 0301 	add.w	r3, r3, #1
 8000578:	61bb      	str	r3, [r7, #24]
 800057a:	69bb      	ldr	r3, [r7, #24]
 800057c:	2b07      	cmp	r3, #7
 800057e:	d9b5      	bls.n	80004ec <GPIO_Init+0x10c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	697a      	ldr	r2, [r7, #20]
 8000584:	605a      	str	r2, [r3, #4]
  }
}
 8000586:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800059e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f04f 0202 	mov.w	r2, #2
 80005a6:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f04f 0204 	mov.w	r2, #4
 80005ae:	70da      	strb	r2, [r3, #3]
}
 80005b0:	f107 070c 	add.w	r7, r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80005c8:	f04f 0300 	mov.w	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	4013      	ands	r3, r2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d003      	beq.n	80005e2 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80005da:	f04f 0301 	mov.w	r3, #1
 80005de:	73fb      	strb	r3, [r7, #15]
 80005e0:	e002      	b.n	80005e8 <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80005e2:	f04f 0300 	mov.w	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	f107 0714 	add.w	r7, r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop

080005f8 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	b29b      	uxth	r3, r3
}
 8000606:	4618      	mov	r0, r3
 8000608:	f107 070c 	add.w	r7, r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000620:	f04f 0300 	mov.w	r3, #0
 8000624:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	68da      	ldr	r2, [r3, #12]
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	4013      	ands	r3, r2
 800062e:	2b00      	cmp	r3, #0
 8000630:	d003      	beq.n	800063a <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000632:	f04f 0301 	mov.w	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	e002      	b.n	8000640 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800063a:	f04f 0300 	mov.w	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000640:	7bfb      	ldrb	r3, [r7, #15]
}
 8000642:	4618      	mov	r0, r3
 8000644:	f107 0714 	add.w	r7, r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop

08000650 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	b29b      	uxth	r3, r3
}
 800065e:	4618      	mov	r0, r3
 8000660:	f107 070c 	add.w	r7, r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000678:	887a      	ldrh	r2, [r7, #2]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	611a      	str	r2, [r3, #16]
}
 800067e:	f107 070c 	add.w	r7, r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000694:	887a      	ldrh	r2, [r7, #2]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	615a      	str	r2, [r3, #20]
}
 800069a:	f107 070c 	add.w	r7, r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	4613      	mov	r3, r2
 80006ae:	460a      	mov	r2, r1
 80006b0:	807a      	strh	r2, [r7, #2]
 80006b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80006b4:	787b      	ldrb	r3, [r7, #1]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d003      	beq.n	80006c2 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006ba:	887a      	ldrh	r2, [r7, #2]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	e002      	b.n	80006c8 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80006c2:	887a      	ldrh	r2, [r7, #2]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	615a      	str	r2, [r3, #20]
  }
}
 80006c8:	f107 070c 	add.w	r7, r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop

080006d4 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80006e0:	887a      	ldrh	r2, [r7, #2]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60da      	str	r2, [r3, #12]
}
 80006e6:	f107 070c 	add.w	r7, r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 80006fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000700:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	4313      	orrs	r3, r2
 8000708:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000710:	887a      	ldrh	r2, [r7, #2]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	60fb      	str	r3, [r7, #12]
}
 8000728:	f107 0714 	add.w	r7, r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	71fa      	strb	r2, [r7, #7]
 8000740:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
 8000742:	f04f 0300 	mov.w	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <GPIO_EventOutputConfig+0x48>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000754:	4013      	ands	r3, r2
 8000756:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	4313      	orrs	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	4313      	orrs	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <GPIO_EventOutputConfig+0x48>)
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	601a      	str	r2, [r3, #0]
}
 8000772:	f107 0714 	add.w	r7, r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	40010000 	.word	0x40010000

08000780 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <GPIO_EventOutputCmd+0x1c>)
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	601a      	str	r2, [r3, #0]
}
 8000790:	f107 070c 	add.w	r7, r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	4220001c 	.word	0x4220001c

080007a0 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80007ac:	f04f 0300 	mov.w	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	f04f 0300 	mov.w	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	f04f 0300 	mov.w	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	da03      	bge.n	80007d2 <GPIO_PinRemapConfig+0x32>
  {
    tmpreg = AFIO->MAPR2;
 80007ca:	4b34      	ldr	r3, [pc, #208]	; (800089c <GPIO_PinRemapConfig+0xfc>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	e002      	b.n	80007d8 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80007d2:	4b32      	ldr	r3, [pc, #200]	; (800089c <GPIO_PinRemapConfig+0xfc>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80007de:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80007e2:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80007ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80007ee:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80007f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80007fa:	d10a      	bne.n	8000812 <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000802:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <GPIO_PinRemapConfig+0xfc>)
 8000806:	4a25      	ldr	r2, [pc, #148]	; (800089c <GPIO_PinRemapConfig+0xfc>)
 8000808:	6852      	ldr	r2, [r2, #4]
 800080a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	e026      	b.n	8000860 <GPIO_PinRemapConfig+0xc0>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000818:	2b00      	cmp	r3, #0
 800081a:	d010      	beq.n	800083e <GPIO_PinRemapConfig+0x9e>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	f04f 0203 	mov.w	r2, #3
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	ea6f 0303 	mvn.w	r3, r3
 800082e:	697a      	ldr	r2, [r7, #20]
 8000830:	4013      	ands	r3, r2
 8000832:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e010      	b.n	8000860 <GPIO_PinRemapConfig+0xc0>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8000844:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	ea6f 0303 	mvn.w	r3, r3
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	4013      	ands	r3, r2
 8000856:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800085e:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00a      	beq.n	800087c <GPIO_PinRemapConfig+0xdc>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	ea4f 5353 	mov.w	r3, r3, lsr #21
 800086c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	4313      	orrs	r3, r2
 800087a:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	da03      	bge.n	800088a <GPIO_PinRemapConfig+0xea>
  {
    AFIO->MAPR2 = tmpreg;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <GPIO_PinRemapConfig+0xfc>)
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	61da      	str	r2, [r3, #28]
 8000888:	e002      	b.n	8000890 <GPIO_PinRemapConfig+0xf0>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <GPIO_PinRemapConfig+0xfc>)
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	605a      	str	r2, [r3, #4]
  }  
}
 8000890:	f107 071c 	add.w	r7, r7, #28
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40010000 	.word	0x40010000

080008a0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80008a0:	b490      	push	{r4, r7}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4602      	mov	r2, r0
 80008a8:	460b      	mov	r3, r1
 80008aa:	71fa      	strb	r2, [r7, #7]
 80008ac:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80008ae:	f04f 0300 	mov.w	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	f003 0303 	and.w	r3, r3, #3
 80008ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80008be:	f04f 020f 	mov.w	r2, #15
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <GPIO_EXTILineConfig+0x94>)
 80008ca:	79ba      	ldrb	r2, [r7, #6]
 80008cc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	4918      	ldr	r1, [pc, #96]	; (8000934 <GPIO_EXTILineConfig+0x94>)
 80008d4:	79b8      	ldrb	r0, [r7, #6]
 80008d6:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80008da:	b2c0      	uxtb	r0, r0
 80008dc:	f100 0002 	add.w	r0, r0, #2
 80008e0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80008e4:	68f9      	ldr	r1, [r7, #12]
 80008e6:	ea6f 0101 	mvn.w	r1, r1
 80008ea:	4001      	ands	r1, r0
 80008ec:	f102 0202 	add.w	r2, r2, #2
 80008f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <GPIO_EXTILineConfig+0x94>)
 80008f6:	79ba      	ldrb	r2, [r7, #6]
 80008f8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	490d      	ldr	r1, [pc, #52]	; (8000934 <GPIO_EXTILineConfig+0x94>)
 8000900:	79b8      	ldrb	r0, [r7, #6]
 8000902:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8000906:	b2c0      	uxtb	r0, r0
 8000908:	f100 0002 	add.w	r0, r0, #2
 800090c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000910:	79fc      	ldrb	r4, [r7, #7]
 8000912:	79b9      	ldrb	r1, [r7, #6]
 8000914:	f001 0103 	and.w	r1, r1, #3
 8000918:	ea4f 0181 	mov.w	r1, r1, lsl #2
 800091c:	fa04 f101 	lsl.w	r1, r4, r1
 8000920:	4301      	orrs	r1, r0
 8000922:	f102 0202 	add.w	r2, r2, #2
 8000926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800092a:	f107 0710 	add.w	r7, r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bc90      	pop	{r4, r7}
 8000932:	4770      	bx	lr
 8000934:	40010000 	.word	0x40010000

08000938 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <GPIO_ETH_MediaInterfaceConfig+0x18>)
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
}
 8000946:	f107 070c 	add.w	r7, r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	422000dc 	.word	0x422000dc

08000954 <__WFI>:

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
 8000958:	bf30      	wfi
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <__WFE>:
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
 8000964:	bf20      	wfe
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8000970:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000974:	f04f 0101 	mov.w	r1, #1
 8000978:	f000 fc2a 	bl	80011d0 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 800097c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000980:	f04f 0100 	mov.w	r1, #0
 8000984:	f000 fc24 	bl	80011d0 <RCC_APB1PeriphResetCmd>
}
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop

0800098c <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the RTC and backup registers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <PWR_BackupAccessCmd+0x1c>)
 8000998:	79fa      	ldrb	r2, [r7, #7]
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	f107 070c 	add.w	r7, r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	420e0020 	.word	0x420e0020

080009ac <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <PWR_PVDCmd+0x1c>)
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	f107 070c 	add.w	r7, r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	420e0010 	.word	0x420e0010

080009cc <PWR_PVDLevelConfig>:
  *     @arg PWR_PVDLevel_2V8: PVD detection level set to 2.8V
  *     @arg PWR_PVDLevel_2V9: PVD detection level set to 2.9V
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80009d4:	f04f 0300 	mov.w	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  tmpreg = PWR->CR;
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <PWR_PVDLevelConfig+0x34>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	60fb      	str	r3, [r7, #12]
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80009e6:	60fb      	str	r3, [r7, #12]
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  PWR->CR = tmpreg;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <PWR_PVDLevelConfig+0x34>)
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	601a      	str	r2, [r3, #0]
}
 80009f6:	f107 0714 	add.w	r7, r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	40007000 	.word	0x40007000

08000a04 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <PWR_WakeUpPinCmd+0x1c>)
 8000a10:	79fa      	ldrb	r2, [r7, #7]
 8000a12:	601a      	str	r2, [r3, #0]
}
 8000a14:	f107 070c 	add.w	r7, r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	420e00a0 	.word	0x420e00a0

08000a24 <PWR_EnterSTOPMode>:
  *     @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *     @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8000a30:	f04f 0300 	mov.w	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <PWR_EnterSTOPMode+0x60>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f023 0303 	bic.w	r3, r3, #3
 8000a42:	60fb      	str	r3, [r7, #12]
  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  PWR->CR = tmpreg;
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <PWR_EnterSTOPMode+0x60>)
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	601a      	str	r2, [r3, #0]
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <PWR_EnterSTOPMode+0x64>)
 8000a54:	4a0c      	ldr	r2, [pc, #48]	; (8000a88 <PWR_EnterSTOPMode+0x64>)
 8000a56:	6912      	ldr	r2, [r2, #16]
 8000a58:	f042 0204 	orr.w	r2, r2, #4
 8000a5c:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d102      	bne.n	8000a6a <PWR_EnterSTOPMode+0x46>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8000a64:	f7ff ff76 	bl	8000954 <__WFI>
 8000a68:	e001      	b.n	8000a6e <PWR_EnterSTOPMode+0x4a>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8000a6a:	f7ff ff79 	bl	8000960 <__WFE>
  }
  
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <PWR_EnterSTOPMode+0x64>)
 8000a70:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <PWR_EnterSTOPMode+0x64>)
 8000a72:	6912      	ldr	r2, [r2, #16]
 8000a74:	f022 0204 	bic.w	r2, r2, #4
 8000a78:	611a      	str	r2, [r3, #16]
}
 8000a7a:	f107 0710 	add.w	r7, r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40007000 	.word	0x40007000
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <PWR_EnterSTANDBYMode>:
  * @brief  Enters STANDBY mode.
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Clear Wake-up flag */
  PWR->CR |= PWR_CR_CWUF;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <PWR_EnterSTANDBYMode+0x30>)
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <PWR_EnterSTANDBYMode+0x30>)
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	f042 0204 	orr.w	r2, r2, #4
 8000a9a:	601a      	str	r2, [r3, #0]
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <PWR_EnterSTANDBYMode+0x30>)
 8000a9e:	4a07      	ldr	r2, [pc, #28]	; (8000abc <PWR_EnterSTANDBYMode+0x30>)
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	f042 0202 	orr.w	r2, r2, #2
 8000aa6:	601a      	str	r2, [r3, #0]
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <PWR_EnterSTANDBYMode+0x34>)
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <PWR_EnterSTANDBYMode+0x34>)
 8000aac:	6912      	ldr	r2, [r2, #16]
 8000aae:	f042 0204 	orr.w	r2, r2, #4
 8000ab2:	611a      	str	r2, [r3, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8000ab4:	f7ff ff4e 	bl	8000954 <__WFI>
}
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40007000 	.word	0x40007000
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <PWR_GetFlagStatus>:
  *     @arg PWR_FLAG_SB: StandBy flag
  *     @arg PWR_FLAG_PVDO: PVD Output
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <PWR_GetFlagStatus+0x38>)
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <PWR_GetFlagStatus+0x22>
  {
    bitstatus = SET;
 8000ade:	f04f 0301 	mov.w	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e002      	b.n	8000aec <PWR_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	f107 0714 	add.w	r7, r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40007000 	.word	0x40007000

08000b00 <PWR_ClearFlag>:
  *     @arg PWR_FLAG_WU: Wake Up flag
  *     @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <PWR_ClearFlag+0x24>)
 8000b0a:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <PWR_ClearFlag+0x24>)
 8000b0c:	6811      	ldr	r1, [r2, #0]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8000b14:	430a      	orrs	r2, r1
 8000b16:	601a      	str	r2, [r3, #0]
}
 8000b18:	f107 070c 	add.w	r7, r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40007000 	.word	0x40007000

08000b28 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <RCC_DeInit+0x54>)
 8000b2e:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <RCC_DeInit+0x54>)
 8000b30:	6812      	ldr	r2, [r2, #0]
 8000b32:	f042 0201 	orr.w	r2, r2, #1
 8000b36:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000b38:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <RCC_DeInit+0x54>)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <RCC_DeInit+0x54>)
 8000b3c:	6859      	ldr	r1, [r3, #4]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <RCC_DeInit+0x58>)
 8000b40:	400b      	ands	r3, r1
 8000b42:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <RCC_DeInit+0x54>)
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <RCC_DeInit+0x54>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b52:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <RCC_DeInit+0x54>)
 8000b56:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <RCC_DeInit+0x54>)
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b5e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <RCC_DeInit+0x54>)
 8000b62:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <RCC_DeInit+0x54>)
 8000b64:	6852      	ldr	r2, [r2, #4]
 8000b66:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000b6a:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <RCC_DeInit+0x54>)
 8000b6e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b72:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	f8ff0000 	.word	0xf8ff0000

08000b84 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <RCC_HSEConfig+0x58>)
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <RCC_HSEConfig+0x58>)
 8000b90:	6812      	ldr	r2, [r2, #0]
 8000b92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b96:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <RCC_HSEConfig+0x58>)
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <RCC_HSEConfig+0x58>)
 8000b9c:	6812      	ldr	r2, [r2, #0]
 8000b9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ba2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000baa:	d003      	beq.n	8000bb4 <RCC_HSEConfig+0x30>
 8000bac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000bb0:	d007      	beq.n	8000bc2 <RCC_HSEConfig+0x3e>
 8000bb2:	e00d      	b.n	8000bd0 <RCC_HSEConfig+0x4c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <RCC_HSEConfig+0x58>)
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <RCC_HSEConfig+0x58>)
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000bbe:	601a      	str	r2, [r3, #0]
      break;
 8000bc0:	e007      	b.n	8000bd2 <RCC_HSEConfig+0x4e>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <RCC_HSEConfig+0x58>)
 8000bc4:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <RCC_HSEConfig+0x58>)
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8000bcc:	601a      	str	r2, [r3, #0]
      break;
 8000bce:	e000      	b.n	8000bd2 <RCC_HSEConfig+0x4e>
      
    default:
      break;
 8000bd0:	bf00      	nop
  }
}
 8000bd2:	f107 070c 	add.w	r7, r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	40021000 	.word	0x40021000

08000be0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8000be6:	f04f 0300 	mov.w	r3, #0
 8000bea:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000bf8:	f04f 0031 	mov.w	r0, #49	; 0x31
 8000bfc:	f000 fb38 	bl	8001270 <RCC_GetFlagStatus>
 8000c00:	4603      	mov	r3, r0
 8000c02:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	f103 0301 	add.w	r3, r3, #1
 8000c0a:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000c12:	d002      	beq.n	8000c1a <RCC_WaitForHSEStartUp+0x3a>
 8000c14:	79bb      	ldrb	r3, [r7, #6]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0ee      	beq.n	8000bf8 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000c1a:	f04f 0031 	mov.w	r0, #49	; 0x31
 8000c1e:	f000 fb27 	bl	8001270 <RCC_GetFlagStatus>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d003      	beq.n	8000c30 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8000c28:	f04f 0301 	mov.w	r3, #1
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	e002      	b.n	8000c36 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f107 0708 	add.w	r7, r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop

08000c44 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8000c4e:	f04f 0300 	mov.w	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <RCC_AdjustHSICalibrationValue+0x3c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c60:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <RCC_AdjustHSICalibrationValue+0x3c>)
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	601a      	str	r2, [r3, #0]
}
 8000c74:	f107 0714 	add.w	r7, r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <RCC_HSICmd+0x1c>)
 8000c90:	79fa      	ldrb	r2, [r7, #7]
 8000c92:	601a      	str	r2, [r3, #0]
}
 8000c94:	f107 070c 	add.w	r7, r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	42420000 	.word	0x42420000

08000ca4 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <RCC_PLLConfig+0x3c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000cc0:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <RCC_PLLConfig+0x3c>)
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	605a      	str	r2, [r3, #4]
}
 8000cd4:	f107 0714 	add.w	r7, r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <RCC_PLLCmd+0x1c>)
 8000cf0:	79fa      	ldrb	r2, [r7, #7]
 8000cf2:	601a      	str	r2, [r3, #0]
}
 8000cf4:	f107 070c 	add.w	r7, r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	42420060 	.word	0x42420060

08000d04 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <RCC_SYSCLKConfig+0x34>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f023 0303 	bic.w	r3, r3, #3
 8000d1e:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <RCC_SYSCLKConfig+0x34>)
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	605a      	str	r2, [r3, #4]
}
 8000d2e:	f107 0714 	add.w	r7, r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	40021000 	.word	0x40021000

08000d3c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <RCC_GetSYSCLKSource+0x18>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	b2db      	uxtb	r3, r3
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40021000 	.word	0x40021000

08000d58 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <RCC_HCLKConfig+0x34>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d72:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <RCC_HCLKConfig+0x34>)
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	605a      	str	r2, [r3, #4]
}
 8000d82:	f107 0714 	add.w	r7, r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40021000 	.word	0x40021000

08000d90 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <RCC_PCLK1Config+0x34>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000daa:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <RCC_PCLK1Config+0x34>)
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	605a      	str	r2, [r3, #4]
}
 8000dba:	f107 0714 	add.w	r7, r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <RCC_PCLK2Config+0x38>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000de2:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <RCC_PCLK2Config+0x38>)
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	605a      	str	r2, [r3, #4]
}
 8000df6:	f107 0714 	add.w	r7, r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	40021000 	.word	0x40021000

08000e04 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	71fa      	strb	r2, [r7, #7]
 8000e10:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d008      	beq.n	8000e2a <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <RCC_ITConfig+0x48>)
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <RCC_ITConfig+0x48>)
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	b2d1      	uxtb	r1, r2
 8000e20:	79fa      	ldrb	r2, [r7, #7]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	701a      	strb	r2, [r3, #0]
 8000e28:	e00a      	b.n	8000e40 <RCC_ITConfig+0x3c>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <RCC_ITConfig+0x48>)
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <RCC_ITConfig+0x48>)
 8000e2e:	7812      	ldrb	r2, [r2, #0]
 8000e30:	b2d1      	uxtb	r1, r2
 8000e32:	79fa      	ldrb	r2, [r7, #7]
 8000e34:	ea6f 0202 	mvn.w	r2, r2
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	701a      	strb	r2, [r3, #0]
  }
}
 8000e40:	f107 070c 	add.w	r7, r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40021009 	.word	0x40021009

08000e50 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <RCC_USBCLKConfig+0x18>)
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	601a      	str	r2, [r3, #0]
}
 8000e5e:	f107 070c 	add.w	r7, r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	424200d8 	.word	0x424200d8

08000e6c <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <RCC_ADCCLKConfig+0x34>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e86:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <RCC_ADCCLKConfig+0x34>)
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	605a      	str	r2, [r3, #4]
}
 8000e96:	f107 0714 	add.w	r7, r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <RCC_LSEConfig+0x48>)
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <RCC_LSEConfig+0x48>)
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d002      	beq.n	8000eca <RCC_LSEConfig+0x26>
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d005      	beq.n	8000ed4 <RCC_LSEConfig+0x30>
 8000ec8:	e009      	b.n	8000ede <RCC_LSEConfig+0x3a>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <RCC_LSEConfig+0x48>)
 8000ecc:	f04f 0201 	mov.w	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
      break;
 8000ed2:	e005      	b.n	8000ee0 <RCC_LSEConfig+0x3c>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <RCC_LSEConfig+0x48>)
 8000ed6:	f04f 0205 	mov.w	r2, #5
 8000eda:	701a      	strb	r2, [r3, #0]
      break;            
 8000edc:	e000      	b.n	8000ee0 <RCC_LSEConfig+0x3c>
      
    default:
      break;      
 8000ede:	bf00      	nop
  }
}
 8000ee0:	f107 070c 	add.w	r7, r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40021020 	.word	0x40021020

08000ef0 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <RCC_LSICmd+0x1c>)
 8000efc:	79fa      	ldrb	r2, [r7, #7]
 8000efe:	601a      	str	r2, [r3, #0]
}
 8000f00:	f107 070c 	add.w	r7, r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	42420480 	.word	0x42420480

08000f10 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <RCC_RTCCLKConfig+0x20>)
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <RCC_RTCCLKConfig+0x20>)
 8000f1c:	6a11      	ldr	r1, [r2, #32]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	621a      	str	r2, [r3, #32]
}
 8000f24:	f107 070c 	add.w	r7, r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <RCC_RTCCLKCmd+0x1c>)
 8000f40:	79fa      	ldrb	r2, [r7, #7]
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	f107 070c 	add.w	r7, r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	4242043c 	.word	0x4242043c

08000f54 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000f5c:	f04f 0300 	mov.w	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000f74:	4b51      	ldr	r3, [pc, #324]	; (80010bc <RCC_GetClocksFreq+0x168>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d007      	beq.n	8000f94 <RCC_GetClocksFreq+0x40>
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d009      	beq.n	8000f9c <RCC_GetClocksFreq+0x48>
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d135      	bne.n	8000ff8 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a4c      	ldr	r2, [pc, #304]	; (80010c0 <RCC_GetClocksFreq+0x16c>)
 8000f90:	601a      	str	r2, [r3, #0]
      break;
 8000f92:	e035      	b.n	8001000 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a4a      	ldr	r2, [pc, #296]	; (80010c0 <RCC_GetClocksFreq+0x16c>)
 8000f98:	601a      	str	r2, [r3, #0]
      break;
 8000f9a:	e031      	b.n	8001000 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000f9c:	4b47      	ldr	r3, [pc, #284]	; (80010bc <RCC_GetClocksFreq+0x168>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000fa4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000fa6:	4b45      	ldr	r3, [pc, #276]	; (80010bc <RCC_GetClocksFreq+0x168>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fae:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8000fb6:	f103 0302 	add.w	r3, r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4a3f      	ldr	r2, [pc, #252]	; (80010c4 <RCC_GetClocksFreq+0x170>)
 8000fc6:	fb02 f203 	mul.w	r2, r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000fce:	e017      	b.n	8001000 <RCC_GetClocksFreq+0xac>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <RCC_GetClocksFreq+0x168>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d006      	beq.n	8000fea <RCC_GetClocksFreq+0x96>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4a39      	ldr	r2, [pc, #228]	; (80010c4 <RCC_GetClocksFreq+0x170>)
 8000fe0:	fb02 f203 	mul.w	r2, r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000fe8:	e00a      	b.n	8001000 <RCC_GetClocksFreq+0xac>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4a34      	ldr	r2, [pc, #208]	; (80010c0 <RCC_GetClocksFreq+0x16c>)
 8000fee:	fb02 f203 	mul.w	r2, r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000ff6:	e003      	b.n	8001000 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <RCC_GetClocksFreq+0x16c>)
 8000ffc:	601a      	str	r2, [r3, #0]
      break;
 8000ffe:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <RCC_GetClocksFreq+0x168>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001008:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001010:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001012:	4a2d      	ldr	r2, [pc, #180]	; (80010c8 <RCC_GetClocksFreq+0x174>)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	18d3      	adds	r3, r2, r3
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	fa22 f203 	lsr.w	r2, r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <RCC_GetClocksFreq+0x168>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001034:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800103c:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800103e:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <RCC_GetClocksFreq+0x174>)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	18d3      	adds	r3, r2, r3
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	fa22 f203 	lsr.w	r2, r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <RCC_GetClocksFreq+0x168>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001060:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001068:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800106a:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <RCC_GetClocksFreq+0x174>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	18d3      	adds	r3, r2, r3
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	fa22 f203 	lsr.w	r2, r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <RCC_GetClocksFreq+0x168>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800108c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	ea4f 3393 	mov.w	r3, r3, lsr #14
 8001094:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001096:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <RCC_GetClocksFreq+0x178>)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	18d3      	adds	r3, r2, r3
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68da      	ldr	r2, [r3, #12]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	611a      	str	r2, [r3, #16]
}
 80010b0:	f107 071c 	add.w	r7, r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000
 80010c0:	007a1200 	.word	0x007a1200
 80010c4:	003d0900 	.word	0x003d0900
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000010 	.word	0x20000010

080010d0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <RCC_AHBPeriphClockCmd+0x3c>)
 80010e4:	4a09      	ldr	r2, [pc, #36]	; (800110c <RCC_AHBPeriphClockCmd+0x3c>)
 80010e6:	6951      	ldr	r1, [r2, #20]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	e007      	b.n	8001100 <RCC_AHBPeriphClockCmd+0x30>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <RCC_AHBPeriphClockCmd+0x3c>)
 80010f2:	4a06      	ldr	r2, [pc, #24]	; (800110c <RCC_AHBPeriphClockCmd+0x3c>)
 80010f4:	6951      	ldr	r1, [r2, #20]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	ea6f 0202 	mvn.w	r2, r2
 80010fc:	400a      	ands	r2, r1
 80010fe:	615a      	str	r2, [r3, #20]
  }
}
 8001100:	f107 070c 	add.w	r7, r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000

08001110 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <RCC_APB2PeriphClockCmd+0x3c>)
 8001124:	4a09      	ldr	r2, [pc, #36]	; (800114c <RCC_APB2PeriphClockCmd+0x3c>)
 8001126:	6991      	ldr	r1, [r2, #24]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	430a      	orrs	r2, r1
 800112c:	619a      	str	r2, [r3, #24]
 800112e:	e007      	b.n	8001140 <RCC_APB2PeriphClockCmd+0x30>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <RCC_APB2PeriphClockCmd+0x3c>)
 8001132:	4a06      	ldr	r2, [pc, #24]	; (800114c <RCC_APB2PeriphClockCmd+0x3c>)
 8001134:	6991      	ldr	r1, [r2, #24]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	ea6f 0202 	mvn.w	r2, r2
 800113c:	400a      	ands	r2, r1
 800113e:	619a      	str	r2, [r3, #24]
  }
}
 8001140:	f107 070c 	add.w	r7, r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000

08001150 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d006      	beq.n	8001170 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <RCC_APB1PeriphClockCmd+0x3c>)
 8001164:	4a09      	ldr	r2, [pc, #36]	; (800118c <RCC_APB1PeriphClockCmd+0x3c>)
 8001166:	69d1      	ldr	r1, [r2, #28]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	430a      	orrs	r2, r1
 800116c:	61da      	str	r2, [r3, #28]
 800116e:	e007      	b.n	8001180 <RCC_APB1PeriphClockCmd+0x30>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <RCC_APB1PeriphClockCmd+0x3c>)
 8001172:	4a06      	ldr	r2, [pc, #24]	; (800118c <RCC_APB1PeriphClockCmd+0x3c>)
 8001174:	69d1      	ldr	r1, [r2, #28]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	ea6f 0202 	mvn.w	r2, r2
 800117c:	400a      	ands	r2, r1
 800117e:	61da      	str	r2, [r3, #28]
  }
}
 8001180:	f107 070c 	add.w	r7, r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000

08001190 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <RCC_APB2PeriphResetCmd+0x3c>)
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <RCC_APB2PeriphResetCmd+0x3c>)
 80011a6:	68d1      	ldr	r1, [r2, #12]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	e007      	b.n	80011c0 <RCC_APB2PeriphResetCmd+0x30>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <RCC_APB2PeriphResetCmd+0x3c>)
 80011b2:	4a06      	ldr	r2, [pc, #24]	; (80011cc <RCC_APB2PeriphResetCmd+0x3c>)
 80011b4:	68d1      	ldr	r1, [r2, #12]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	ea6f 0202 	mvn.w	r2, r2
 80011bc:	400a      	ands	r2, r1
 80011be:	60da      	str	r2, [r3, #12]
  }
}
 80011c0:	f107 070c 	add.w	r7, r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <RCC_APB1PeriphResetCmd+0x3c>)
 80011e4:	4a09      	ldr	r2, [pc, #36]	; (800120c <RCC_APB1PeriphResetCmd+0x3c>)
 80011e6:	6911      	ldr	r1, [r2, #16]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	e007      	b.n	8001200 <RCC_APB1PeriphResetCmd+0x30>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <RCC_APB1PeriphResetCmd+0x3c>)
 80011f2:	4a06      	ldr	r2, [pc, #24]	; (800120c <RCC_APB1PeriphResetCmd+0x3c>)
 80011f4:	6911      	ldr	r1, [r2, #16]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	ea6f 0202 	mvn.w	r2, r2
 80011fc:	400a      	ands	r2, r1
 80011fe:	611a      	str	r2, [r3, #16]
  }
}
 8001200:	f107 070c 	add.w	r7, r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000

08001210 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <RCC_BackupResetCmd+0x1c>)
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	f107 070c 	add.w	r7, r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	42420440 	.word	0x42420440

08001230 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <RCC_ClockSecuritySystemCmd+0x1c>)
 800123c:	79fa      	ldrb	r2, [r7, #7]
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	f107 070c 	add.w	r7, r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	4242004c 	.word	0x4242004c

08001250 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <RCC_MCOConfig+0x1c>)
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	701a      	strb	r2, [r3, #0]
}
 8001260:	f107 070c 	add.w	r7, r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40021007 	.word	0x40021007

08001270 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001292:	b2db      	uxtb	r3, r3
 8001294:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d103      	bne.n	80012a4 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <RCC_GetFlagStatus+0x7c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	e009      	b.n	80012b8 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d103      	bne.n	80012b2 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <RCC_GetFlagStatus+0x7c>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	e002      	b.n	80012b8 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <RCC_GetFlagStatus+0x7c>)
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <RCC_GetFlagStatus+0x68>
  {
    bitstatus = SET;
 80012d0:	f04f 0301 	mov.w	r3, #1
 80012d4:	74fb      	strb	r3, [r7, #19]
 80012d6:	e002      	b.n	80012de <RCC_GetFlagStatus+0x6e>
  }
  else
  {
    bitstatus = RESET;
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80012de:	7cfb      	ldrb	r3, [r7, #19]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	f107 071c 	add.w	r7, r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000

080012f0 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <RCC_ClearFlag+0x18>)
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <RCC_ClearFlag+0x18>)
 80012f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012fa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80012fe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000

0800130c <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <RCC_GetITStatus+0x38>)
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <RCC_GetITStatus+0x24>
  {
    bitstatus = SET;
 8001328:	f04f 0301 	mov.w	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e002      	b.n	8001336 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	f107 0714 	add.w	r7, r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000

08001348 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <RCC_ClearITPendingBit+0x1c>)
 8001354:	79fa      	ldrb	r2, [r7, #7]
 8001356:	701a      	strb	r2, [r3, #0]
}
 8001358:	f107 070c 	add.w	r7, r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	4002100a 	.word	0x4002100a

08001368 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	80fa      	strh	r2, [r7, #6]
 8001374:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001376:	797b      	ldrb	r3, [r7, #5]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d008      	beq.n	800138e <RTC_ITConfig+0x26>
  {
    RTC->CRH |= RTC_IT;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <RTC_ITConfig+0x48>)
 800137e:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <RTC_ITConfig+0x48>)
 8001380:	8812      	ldrh	r2, [r2, #0]
 8001382:	b291      	uxth	r1, r2
 8001384:	88fa      	ldrh	r2, [r7, #6]
 8001386:	430a      	orrs	r2, r1
 8001388:	b292      	uxth	r2, r2
 800138a:	801a      	strh	r2, [r3, #0]
 800138c:	e00a      	b.n	80013a4 <RTC_ITConfig+0x3c>
  }
  else
  {
    RTC->CRH &= (uint16_t)~RTC_IT;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <RTC_ITConfig+0x48>)
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <RTC_ITConfig+0x48>)
 8001392:	8812      	ldrh	r2, [r2, #0]
 8001394:	b291      	uxth	r1, r2
 8001396:	88fa      	ldrh	r2, [r7, #6]
 8001398:	ea6f 0202 	mvn.w	r2, r2
 800139c:	b292      	uxth	r2, r2
 800139e:	400a      	ands	r2, r1
 80013a0:	b292      	uxth	r2, r2
 80013a2:	801a      	strh	r2, [r3, #0]
  }
}
 80013a4:	f107 070c 	add.w	r7, r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40002800 	.word	0x40002800

080013b4 <RTC_EnterConfigMode>:
  * @brief  Enters the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_EnterConfigMode(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* Set the CNF flag to enter in the Configuration Mode */
  RTC->CRL |= RTC_CRL_CNF;
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <RTC_EnterConfigMode+0x1c>)
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <RTC_EnterConfigMode+0x1c>)
 80013bc:	8892      	ldrh	r2, [r2, #4]
 80013be:	b292      	uxth	r2, r2
 80013c0:	f042 0210 	orr.w	r2, r2, #16
 80013c4:	b292      	uxth	r2, r2
 80013c6:	809a      	strh	r2, [r3, #4]
}
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40002800 	.word	0x40002800

080013d4 <RTC_ExitConfigMode>:
  * @brief  Exits from the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_ExitConfigMode(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* Reset the CNF flag to exit from the Configuration Mode */
  RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <RTC_ExitConfigMode+0x1c>)
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <RTC_ExitConfigMode+0x1c>)
 80013dc:	8892      	ldrh	r2, [r2, #4]
 80013de:	b292      	uxth	r2, r2
 80013e0:	f022 0210 	bic.w	r2, r2, #16
 80013e4:	b292      	uxth	r2, r2
 80013e6:	809a      	strh	r2, [r3, #4]
}
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40002800 	.word	0x40002800

080013f4 <RTC_GetCounter>:
  * @brief  Gets the RTC counter value.
  * @param  None
  * @retval RTC counter value.
  */
uint32_t RTC_GetCounter(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
  uint16_t tmp = 0;
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	80fb      	strh	r3, [r7, #6]
  tmp = RTC->CNTL;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <RTC_GetCounter+0x2c>)
 8001402:	8b9b      	ldrh	r3, [r3, #28]
 8001404:	80fb      	strh	r3, [r7, #6]
  return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <RTC_GetCounter+0x2c>)
 8001408:	8b1b      	ldrh	r3, [r3, #24]
 800140a:	b29b      	uxth	r3, r3
 800140c:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	4313      	orrs	r3, r2
}
 8001414:	4618      	mov	r0, r3
 8001416:	f107 070c 	add.w	r7, r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	40002800 	.word	0x40002800

08001424 <RTC_SetCounter>:
  * @brief  Sets the RTC counter value.
  * @param  CounterValue: RTC counter new value.
  * @retval None
  */
void RTC_SetCounter(uint32_t CounterValue)
{ 
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
 800142c:	f7ff ffc2 	bl	80013b4 <RTC_EnterConfigMode>
  /* Set RTC COUNTER MSB word */
  RTC->CNTH = CounterValue >> 16;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <RTC_SetCounter+0x2c>)
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8001438:	b292      	uxth	r2, r2
 800143a:	831a      	strh	r2, [r3, #24]
  /* Set RTC COUNTER LSB word */
  RTC->CNTL = (CounterValue & RTC_LSB_MASK);
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <RTC_SetCounter+0x2c>)
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	b292      	uxth	r2, r2
 8001442:	839a      	strh	r2, [r3, #28]
  RTC_ExitConfigMode();
 8001444:	f7ff ffc6 	bl	80013d4 <RTC_ExitConfigMode>
}
 8001448:	f107 0708 	add.w	r7, r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40002800 	.word	0x40002800

08001454 <RTC_SetPrescaler>:
  * @brief  Sets the RTC prescaler value.
  * @param  PrescalerValue: RTC prescaler new value.
  * @retval None
  */
void RTC_SetPrescaler(uint32_t PrescalerValue)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_PRESCALER(PrescalerValue));
  
  RTC_EnterConfigMode();
 800145c:	f7ff ffaa 	bl	80013b4 <RTC_EnterConfigMode>
  /* Set RTC PRESCALER MSB word */
  RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <RTC_SetPrescaler+0x30>)
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001468:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800146c:	b292      	uxth	r2, r2
 800146e:	811a      	strh	r2, [r3, #8]
  /* Set RTC PRESCALER LSB word */
  RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <RTC_SetPrescaler+0x30>)
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	b292      	uxth	r2, r2
 8001476:	819a      	strh	r2, [r3, #12]
  RTC_ExitConfigMode();
 8001478:	f7ff ffac 	bl	80013d4 <RTC_ExitConfigMode>
}
 800147c:	f107 0708 	add.w	r7, r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40002800 	.word	0x40002800

08001488 <RTC_SetAlarm>:
  * @brief  Sets the RTC alarm value.
  * @param  AlarmValue: RTC alarm new value.
  * @retval None
  */
void RTC_SetAlarm(uint32_t AlarmValue)
{  
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
 8001490:	f7ff ff90 	bl	80013b4 <RTC_EnterConfigMode>
  /* Set the ALARM MSB word */
  RTC->ALRH = AlarmValue >> 16;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <RTC_SetAlarm+0x2c>)
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800149c:	b292      	uxth	r2, r2
 800149e:	841a      	strh	r2, [r3, #32]
  /* Set the ALARM LSB word */
  RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <RTC_SetAlarm+0x2c>)
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	b292      	uxth	r2, r2
 80014a6:	849a      	strh	r2, [r3, #36]	; 0x24
  RTC_ExitConfigMode();
 80014a8:	f7ff ff94 	bl	80013d4 <RTC_ExitConfigMode>
}
 80014ac:	f107 0708 	add.w	r7, r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40002800 	.word	0x40002800

080014b8 <RTC_GetDivider>:
  * @brief  Gets the RTC divider value.
  * @param  None
  * @retval RTC Divider value.
  */
uint32_t RTC_GetDivider(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0x00;
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
  tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <RTC_GetDivider+0x38>)
 80014c6:	8a1b      	ldrh	r3, [r3, #16]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80014d2:	607b      	str	r3, [r7, #4]
  tmp |= RTC->DIVL;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <RTC_GetDivider+0x38>)
 80014d6:	8a9b      	ldrh	r3, [r3, #20]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	4313      	orrs	r3, r2
 80014de:	607b      	str	r3, [r7, #4]
  return tmp;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	f107 070c 	add.w	r7, r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40002800 	.word	0x40002800

080014f4 <RTC_WaitForLastTask>:
  * @note   This function must be called before any write to RTC registers.
  * @param  None
  * @retval None
  */
void RTC_WaitForLastTask(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* Loop until RTOFF flag is set */
  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
 80014f8:	bf00      	nop
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <RTC_WaitForLastTask+0x1c>)
 80014fc:	889b      	ldrh	r3, [r3, #4]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f8      	beq.n	80014fa <RTC_WaitForLastTask+0x6>
  {
  }
}
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40002800 	.word	0x40002800

08001514 <RTC_WaitForSynchro>:
  *   or an APB clock stop.
  * @param  None
  * @retval None
  */
void RTC_WaitForSynchro(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* Clear RSF flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <RTC_WaitForSynchro+0x2c>)
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <RTC_WaitForSynchro+0x2c>)
 800151c:	8892      	ldrh	r2, [r2, #4]
 800151e:	b292      	uxth	r2, r2
 8001520:	f022 0208 	bic.w	r2, r2, #8
 8001524:	b292      	uxth	r2, r2
 8001526:	809a      	strh	r2, [r3, #4]
  /* Loop until RSF flag is set */
  while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
 8001528:	bf00      	nop
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <RTC_WaitForSynchro+0x2c>)
 800152c:	889b      	ldrh	r3, [r3, #4]
 800152e:	b29b      	uxth	r3, r3
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f8      	beq.n	800152a <RTC_WaitForSynchro+0x16>
  {
  }
}
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40002800 	.word	0x40002800

08001544 <RTC_GetFlagStatus>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
  
  if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <RTC_GetFlagStatus+0x3c>)
 8001556:	889b      	ldrh	r3, [r3, #4]
 8001558:	b29a      	uxth	r2, r3
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	4013      	ands	r3, r2
 800155e:	b29b      	uxth	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <RTC_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 8001564:	f04f 0301 	mov.w	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	e002      	b.n	8001572 <RTC_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	f107 0714 	add.w	r7, r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40002800 	.word	0x40002800

08001584 <RTC_ClearFlag>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval None
  */
void RTC_ClearFlag(uint16_t RTC_FLAG)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
    
  /* Clear the corresponding RTC flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <RTC_ClearFlag+0x2c>)
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <RTC_ClearFlag+0x2c>)
 8001592:	8892      	ldrh	r2, [r2, #4]
 8001594:	b291      	uxth	r1, r2
 8001596:	88fa      	ldrh	r2, [r7, #6]
 8001598:	ea6f 0202 	mvn.w	r2, r2
 800159c:	b292      	uxth	r2, r2
 800159e:	400a      	ands	r2, r1
 80015a0:	b292      	uxth	r2, r2
 80015a2:	809a      	strh	r2, [r3, #4]
}
 80015a4:	f107 070c 	add.w	r7, r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40002800 	.word	0x40002800

080015b4 <RTC_GetITStatus>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval The new state of the RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint16_t RTC_IT)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT)); 
  
  bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <RTC_GetITStatus+0x54>)
 80015c6:	889b      	ldrh	r3, [r3, #4]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4013      	ands	r3, r2
 80015d2:	73fb      	strb	r3, [r7, #15]
  if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <RTC_GetITStatus+0x54>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	4013      	ands	r3, r2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d006      	beq.n	80015f2 <RTC_GetITStatus+0x3e>
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <RTC_GetITStatus+0x3e>
  {
    bitstatus = SET;
 80015ea:	f04f 0301 	mov.w	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e002      	b.n	80015f8 <RTC_GetITStatus+0x44>
  }
  else
  {
    bitstatus = RESET;
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	f107 0714 	add.w	r7, r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40002800 	.word	0x40002800

0800160c <RTC_ClearITPendingBit>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval None
  */
void RTC_ClearITPendingBit(uint16_t RTC_IT)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  
  /* Clear the corresponding RTC pending bit */
  RTC->CRL &= (uint16_t)~RTC_IT;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <RTC_ClearITPendingBit+0x2c>)
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <RTC_ClearITPendingBit+0x2c>)
 800161a:	8892      	ldrh	r2, [r2, #4]
 800161c:	b291      	uxth	r1, r2
 800161e:	88fa      	ldrh	r2, [r7, #6]
 8001620:	ea6f 0202 	mvn.w	r2, r2
 8001624:	b292      	uxth	r2, r2
 8001626:	400a      	ands	r2, r1
 8001628:	b292      	uxth	r2, r2
 800162a:	809a      	strh	r2, [r3, #4]
}
 800162c:	f107 070c 	add.w	r7, r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40002800 	.word	0x40002800

0800163c <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <USART_DeInit+0xb8>)
 8001648:	429a      	cmp	r2, r3
 800164a:	d10c      	bne.n	8001666 <USART_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800164c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001650:	f04f 0101 	mov.w	r1, #1
 8001654:	f7ff fd9c 	bl	8001190 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001658:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800165c:	f04f 0100 	mov.w	r1, #0
 8001660:	f7ff fd96 	bl	8001190 <RCC_APB2PeriphResetCmd>
 8001664:	e042      	b.n	80016ec <USART_DeInit+0xb0>
  }
  else if (USARTx == USART2)
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <USART_DeInit+0xbc>)
 800166a:	429a      	cmp	r2, r3
 800166c:	d10c      	bne.n	8001688 <USART_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800166e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001672:	f04f 0101 	mov.w	r1, #1
 8001676:	f7ff fdab 	bl	80011d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800167a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	f7ff fda5 	bl	80011d0 <RCC_APB1PeriphResetCmd>
 8001686:	e031      	b.n	80016ec <USART_DeInit+0xb0>
  }
  else if (USARTx == USART3)
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <USART_DeInit+0xc0>)
 800168c:	429a      	cmp	r2, r3
 800168e:	d10c      	bne.n	80016aa <USART_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8001690:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001694:	f04f 0101 	mov.w	r1, #1
 8001698:	f7ff fd9a 	bl	80011d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800169c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80016a0:	f04f 0100 	mov.w	r1, #0
 80016a4:	f7ff fd94 	bl	80011d0 <RCC_APB1PeriphResetCmd>
 80016a8:	e020      	b.n	80016ec <USART_DeInit+0xb0>
  }    
  else if (USARTx == UART4)
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <USART_DeInit+0xc4>)
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d10c      	bne.n	80016cc <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80016b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80016b6:	f04f 0101 	mov.w	r1, #1
 80016ba:	f7ff fd89 	bl	80011d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80016be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	f7ff fd83 	bl	80011d0 <RCC_APB1PeriphResetCmd>
 80016ca:	e00f      	b.n	80016ec <USART_DeInit+0xb0>
  }    
  else
  {
    if (USARTx == UART5)
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <USART_DeInit+0xc8>)
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d10b      	bne.n	80016ec <USART_DeInit+0xb0>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80016d4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80016d8:	f04f 0101 	mov.w	r1, #1
 80016dc:	f7ff fd78 	bl	80011d0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80016e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80016e4:	f04f 0100 	mov.w	r1, #0
 80016e8:	f7ff fd72 	bl	80011d0 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80016ec:	f107 0708 	add.w	r7, r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40013800 	.word	0x40013800
 80016f8:	40004400 	.word	0x40004400
 80016fc:	40004800 	.word	0x40004800
 8001700:	40004c00 	.word	0x40004c00
 8001704:	40005000 	.word	0x40005000

08001708 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	; 0x30
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	8a1b      	ldrh	r3, [r3, #16]
 8001738:	b29b      	uxth	r3, r3
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800173c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800173e:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001742:	4013      	ands	r3, r2
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	88db      	ldrh	r3, [r3, #6]
 800174a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174c:	4313      	orrs	r3, r2
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	899b      	ldrh	r3, [r3, #12]
 800175c:	b29b      	uxth	r3, r3
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001762:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8001766:	4013      	ands	r3, r2
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	889a      	ldrh	r2, [r3, #4]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	891b      	ldrh	r3, [r3, #8]
 8001772:	4313      	orrs	r3, r2
 8001774:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800177a:	4313      	orrs	r3, r2
 800177c:	b29b      	uxth	r3, r3
 800177e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001780:	4313      	orrs	r3, r2
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001786:	b29a      	uxth	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	8a9b      	ldrh	r3, [r3, #20]
 8001790:	b29b      	uxth	r3, r3
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8001794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001796:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800179a:	4013      	ands	r3, r2
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	899b      	ldrh	r3, [r3, #12]
 80017a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a4:	4313      	orrs	r3, r2
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fbcd 	bl	8000f54 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	4b37      	ldr	r3, [pc, #220]	; (800189c <USART_Init+0x194>)
 80017be:	429a      	cmp	r2, r3
 80017c0:	d102      	bne.n	80017c8 <USART_Init+0xc0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017c6:	e001      	b.n	80017cc <USART_Init+0xc4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	899b      	ldrh	r3, [r3, #12]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da0f      	bge.n	80017fa <USART_Init+0xf2>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80017da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017dc:	4613      	mov	r3, r2
 80017de:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80017e2:	189b      	adds	r3, r3, r2
 80017e4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80017e8:	189a      	adds	r2, r3, r2
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
 80017f8:	e00e      	b.n	8001818 <USART_Init+0x110>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80017fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017fc:	4613      	mov	r3, r2
 80017fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001802:	189b      	adds	r3, r3, r2
 8001804:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001808:	189a      	adds	r2, r3, r2
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8001818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181a:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <USART_Init+0x198>)
 800181c:	fba3 1302 	umull	r1, r3, r3, r2
 8001820:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001824:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001830:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	899b      	ldrh	r3, [r3, #12]
 8001842:	b29b      	uxth	r3, r3
 8001844:	b29b      	uxth	r3, r3
 8001846:	b21b      	sxth	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	da0f      	bge.n	800186c <USART_Init+0x164>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001852:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <USART_Init+0x198>)
 8001858:	fba3 1302 	umull	r1, r3, r3, r2
 800185c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001866:	4313      	orrs	r3, r2
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800186a:	e00e      	b.n	800188a <USART_Init+0x182>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001872:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <USART_Init+0x198>)
 8001878:	fba3 1302 	umull	r1, r3, r3, r2
 800187c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001886:	4313      	orrs	r3, r2
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188c:	b29a      	uxth	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	811a      	strh	r2, [r3, #8]
}
 8001892:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40013800 	.word	0x40013800
 80018a0:	51eb851f 	.word	0x51eb851f

080018a4 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018b2:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f04f 020c 	mov.w	r2, #12
 80018d2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	819a      	strh	r2, [r3, #12]
}
 80018dc:	f107 070c 	add.w	r7, r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop

080018e8 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	8a1b      	ldrh	r3, [r3, #16]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8001906:	4013      	ands	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	881a      	ldrh	r2, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001912:	4313      	orrs	r3, r2
 8001914:	b29a      	uxth	r2, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	889b      	ldrh	r3, [r3, #4]
 800191a:	4313      	orrs	r3, r2
 800191c:	b29a      	uxth	r2, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	88db      	ldrh	r3, [r3, #6]
 8001922:	4313      	orrs	r3, r2
 8001924:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	b29a      	uxth	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	821a      	strh	r2, [r3, #16]
}
 8001934:	f107 0714 	add.w	r7, r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop

08001940 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	80da      	strh	r2, [r3, #6]
}
 8001968:	f107 070c 	add.w	r7, r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop

08001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d008      	beq.n	8001998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	899b      	ldrh	r3, [r3, #12]
 800198a:	b29b      	uxth	r3, r3
 800198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001990:	b29a      	uxth	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	819a      	strh	r2, [r3, #12]
 8001996:	e007      	b.n	80019a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	899b      	ldrh	r3, [r3, #12]
 800199c:	b29b      	uxth	r3, r3
 800199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	819a      	strh	r2, [r3, #12]
  }
}
 80019a8:	f107 070c 	add.w	r7, r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	460a      	mov	r2, r1
 80019c0:	807a      	strh	r2, [r7, #2]
 80019c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 80019ec:	887b      	ldrh	r3, [r7, #2]
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f04f 0201 	mov.w	r2, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d104      	bne.n	8001a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f103 030c 	add.w	r3, r3, #12
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e00b      	b.n	8001a28 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d104      	bne.n	8001a20 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f103 0310 	add.w	r3, r3, #16
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e003      	b.n	8001a28 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f103 0314 	add.w	r3, r3, #20
 8001a26:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001a28:	787b      	ldrb	r3, [r7, #1]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d006      	beq.n	8001a3c <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	6811      	ldr	r1, [r2, #0]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	e007      	b.n	8001a4c <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	6811      	ldr	r1, [r2, #0]
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	ea6f 0202 	mvn.w	r2, r2
 8001a48:	400a      	ands	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
  }
}
 8001a4c:	f107 071c 	add.w	r7, r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	460a      	mov	r2, r1
 8001a64:	807a      	strh	r2, [r7, #2]
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	8a9b      	ldrh	r3, [r3, #20]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	829a      	strh	r2, [r3, #20]
 8001a7e:	e00a      	b.n	8001a96 <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	8a9b      	ldrh	r3, [r3, #20]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	ea6f 0303 	mvn.w	r3, r3
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	4013      	ands	r3, r2
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	829a      	strh	r2, [r3, #20]
  }
}
 8001a96:	f107 070c 	add.w	r7, r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	8a1b      	ldrh	r3, [r3, #16]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	f023 030f 	bic.w	r3, r3, #15
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	8a1b      	ldrh	r3, [r3, #16]
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	821a      	strh	r2, [r3, #16]
}
 8001ace:	f107 070c 	add.w	r7, r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	899b      	ldrh	r3, [r3, #12]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	899b      	ldrh	r3, [r3, #12]
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	819a      	strh	r2, [r3, #12]
}
 8001b04:	f107 070c 	add.w	r7, r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop

08001b10 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d008      	beq.n	8001b34 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	899b      	ldrh	r3, [r3, #12]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	819a      	strh	r2, [r3, #12]
 8001b32:	e007      	b.n	8001b44 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	899b      	ldrh	r3, [r3, #12]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	f023 0302 	bic.w	r3, r3, #2
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	819a      	strh	r2, [r3, #12]
  }
}
 8001b44:	f107 070c 	add.w	r7, r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	8a1b      	ldrh	r3, [r3, #16]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f023 0320 	bic.w	r3, r3, #32
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	8a1b      	ldrh	r3, [r3, #16]
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	821a      	strh	r2, [r3, #16]
}
 8001b7c:	f107 070c 	add.w	r7, r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop

08001b88 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	8a1b      	ldrh	r3, [r3, #16]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	821a      	strh	r2, [r3, #16]
 8001baa:	e007      	b.n	8001bbc <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	8a1b      	ldrh	r3, [r3, #16]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	821a      	strh	r2, [r3, #16]
  }
}
 8001bbc:	f107 070c 	add.w	r7, r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop

08001bc8 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8001bda:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	809a      	strh	r2, [r3, #4]
}
 8001be4:	f107 070c 	add.w	r7, r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop

08001bf0 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	889b      	ldrh	r3, [r3, #4]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8001c02:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8001c06:	b29b      	uxth	r3, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f107 070c 	add.w	r7, r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	899b      	ldrh	r3, [r3, #12]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	819a      	strh	r2, [r3, #12]
}
 8001c2c:	f107 070c 	add.w	r7, r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop

08001c38 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	8b1b      	ldrh	r3, [r3, #24]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	8b1b      	ldrh	r3, [r3, #24]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	831a      	strh	r2, [r3, #24]
}
 8001c6a:	f107 070c 	add.w	r7, r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	8b1b      	ldrh	r3, [r3, #24]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	8b1b      	ldrh	r3, [r3, #24]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	831a      	strh	r2, [r3, #24]
}
 8001ca2:	f107 070c 	add.w	r7, r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d008      	beq.n	8001cd0 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	8a9b      	ldrh	r3, [r3, #20]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	f043 0320 	orr.w	r3, r3, #32
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	829a      	strh	r2, [r3, #20]
 8001cce:	e007      	b.n	8001ce0 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	8a9b      	ldrh	r3, [r3, #20]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f023 0320 	bic.w	r3, r3, #32
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	829a      	strh	r2, [r3, #20]
  }
}
 8001ce0:	f107 070c 	add.w	r7, r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop

08001cec <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	8a9b      	ldrh	r3, [r3, #20]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	f043 0310 	orr.w	r3, r3, #16
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	829a      	strh	r2, [r3, #20]
 8001d0e:	e007      	b.n	8001d20 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	8a9b      	ldrh	r3, [r3, #20]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	f023 0310 	bic.w	r3, r3, #16
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	829a      	strh	r2, [r3, #20]
  }
}
 8001d20:	f107 070c 	add.w	r7, r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop

08001d2c <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	8a9b      	ldrh	r3, [r3, #20]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	829a      	strh	r2, [r3, #20]
 8001d4e:	e007      	b.n	8001d60 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	8a9b      	ldrh	r3, [r3, #20]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	f023 0308 	bic.w	r3, r3, #8
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	829a      	strh	r2, [r3, #20]
  }
}
 8001d60:	f107 070c 	add.w	r7, r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop

08001d6c <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.   
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	899b      	ldrh	r3, [r3, #12]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	819a      	strh	r2, [r3, #12]
 8001d92:	e009      	b.n	8001da8 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	899b      	ldrh	r3, [r3, #12]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8001d9e:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	819a      	strh	r2, [r3, #12]
  }
}
 8001da8:	f107 070c 	add.w	r7, r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop

08001db4 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d008      	beq.n	8001dd8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	8a9b      	ldrh	r3, [r3, #20]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	829a      	strh	r2, [r3, #20]
 8001dd6:	e007      	b.n	8001de8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	8a9b      	ldrh	r3, [r3, #20]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	829a      	strh	r2, [r3, #20]
  }
}
 8001de8:	f107 070c 	add.w	r7, r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop

08001df4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	8a9b      	ldrh	r3, [r3, #20]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f023 0304 	bic.w	r3, r3, #4
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	8a9b      	ldrh	r3, [r3, #20]
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	887b      	ldrh	r3, [r7, #2]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	829a      	strh	r2, [r3, #20]
}
 8001e20:	f107 070c 	add.w	r7, r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop

08001e2c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	8a9b      	ldrh	r3, [r3, #20]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	829a      	strh	r2, [r3, #20]
 8001e4e:	e007      	b.n	8001e60 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	8a9b      	ldrh	r3, [r3, #20]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f023 0302 	bic.w	r3, r3, #2
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	829a      	strh	r2, [r3, #20]
  }
}
 8001e60:	f107 070c 	add.w	r7, r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop

08001e6c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	887b      	ldrh	r3, [r7, #2]
 8001e86:	4013      	ands	r3, r2
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8001e8e:	f04f 0301 	mov.w	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e002      	b.n	8001e9c <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f107 0714 	add.w	r7, r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop

08001eac <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001eb8:	887b      	ldrh	r3, [r7, #2]
 8001eba:	ea6f 0303 	mvn.w	r3, r3
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	801a      	strh	r2, [r3, #0]
}
 8001ec4:	f107 070c 	add.w	r7, r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop

08001ed0 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001ef4:	887b      	ldrh	r3, [r7, #2]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f04f 0201 	mov.w	r2, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d106      	bne.n	8001f28 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	899b      	ldrh	r3, [r3, #12]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4013      	ands	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e00f      	b.n	8001f48 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d106      	bne.n	8001f3c <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8a1b      	ldrh	r3, [r3, #16]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4013      	ands	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e005      	b.n	8001f48 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	8a9b      	ldrh	r3, [r3, #20]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4013      	ands	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001f48:	887b      	ldrh	r3, [r7, #2]
 8001f4a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f04f 0201 	mov.w	r2, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <USART_GetITStatus+0xae>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 8001f76:	f04f 0301 	mov.w	r3, #1
 8001f7a:	74fb      	strb	r3, [r7, #19]
 8001f7c:	e002      	b.n	8001f84 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	f107 071c 	add.w	r7, r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop

08001f94 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	81fb      	strh	r3, [r7, #14]
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001fb2:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001fb4:	89fb      	ldrh	r3, [r7, #14]
 8001fb6:	f04f 0201 	mov.w	r2, #1
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001fc0:	89bb      	ldrh	r3, [r7, #12]
 8001fc2:	ea6f 0303 	mvn.w	r3, r3
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	801a      	strh	r2, [r3, #0]
}
 8001fcc:	f107 0714 	add.w	r7, r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop

08001fd8 <typeConversion>:
 */

#include "calculations.h"

float typeConversion(uint16_t input)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
	float tmp;
	tmp = (float)((input & 0b0011111111111111)/10000);
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	ea4f 4383 	mov.w	r3, r3, lsl #18
 8001fe8:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8001fec:	4a16      	ldr	r2, [pc, #88]	; (8002048 <typeConversion+0x70>)
 8001fee:	fb82 1203 	smull	r1, r2, r2, r3
 8001ff2:	ea4f 3222 	mov.w	r2, r2, asr #12
 8001ff6:	ea4f 73e3 	mov.w	r3, r3, asr #31
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fbd7 	bl	80027b0 <__aeabi_i2f>
 8002002:	4603      	mov	r3, r0
 8002004:	60fb      	str	r3, [r7, #12]
	if(input & 0b1000000000000000) tmp *= -1;
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	b21b      	sxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	da03      	bge.n	8002016 <typeConversion+0x3e>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002014:	60fb      	str	r3, [r7, #12]
	if(tmp > 1)  return  1;
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	490c      	ldr	r1, [pc, #48]	; (800204c <typeConversion+0x74>)
 800201a:	f000 fdd9 	bl	8002bd0 <__aeabi_fcmpgt>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <typeConversion+0x50>
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <typeConversion+0x74>)
 8002026:	e009      	b.n	800203c <typeConversion+0x64>
	if(tmp < -1) return -1;
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	4909      	ldr	r1, [pc, #36]	; (8002050 <typeConversion+0x78>)
 800202c:	f000 fdb2 	bl	8002b94 <__aeabi_fcmplt>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <typeConversion+0x62>
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <typeConversion+0x78>)
 8002038:	e000      	b.n	800203c <typeConversion+0x64>
	return tmp;
 800203a:	68fb      	ldr	r3, [r7, #12]
}
 800203c:	4618      	mov	r0, r3
 800203e:	f107 0710 	add.w	r7, r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	68db8bad 	.word	0x68db8bad
 800204c:	3f800000 	.word	0x3f800000
 8002050:	bf800000 	.word	0xbf800000

08002054 <Calculations>:

void Calculations(void)
{
 8002054:	b5b0      	push	{r4, r5, r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af00      	add	r7, sp, #0
	int countEx, countIn, countSum;

	float tmpCoordinateGravityForceVector[3] = {0, 0, 0};
 800205a:	4b95      	ldr	r3, [pc, #596]	; (80022b0 <Calculations+0x25c>)
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	4b94      	ldr	r3, [pc, #592]	; (80022b0 <Calculations+0x25c>)
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	4b93      	ldr	r3, [pc, #588]	; (80022b0 <Calculations+0x25c>)
 8002064:	623b      	str	r3, [r7, #32]
	float tmpCoordinateCMVector[3] = {0, 0, 0};
 8002066:	4b92      	ldr	r3, [pc, #584]	; (80022b0 <Calculations+0x25c>)
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b91      	ldr	r3, [pc, #580]	; (80022b0 <Calculations+0x25c>)
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b90      	ldr	r3, [pc, #576]	; (80022b0 <Calculations+0x25c>)
 8002070:	617b      	str	r3, [r7, #20]

	/*Vector rotation:
	 *[totalRotationMatrix X gravityForceVector]
	 *[totalRotationMatrix X CMVector]*/

	for(countIn = 0; countIn < 3; countIn++)
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
 8002078:	e07a      	b.n	8002170 <Calculations+0x11c>
		for(countSum = 0; countSum < 3; countSum++)
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
 8002080:	e06f      	b.n	8002162 <Calculations+0x10e>
		{
			tmpCoordinateGravityForceVector[countIn] += typeConversion(rotationMatrix[countIn][countSum]) * (float)ToolProperties.gravityForceVector[countSum];
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002088:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800208c:	18cb      	adds	r3, r1, r3
 800208e:	f853 4c18 	ldr.w	r4, [r3, #-24]
 8002092:	4983      	ldr	r1, [pc, #524]	; (80022a0 <Calculations+0x24c>)
 8002094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002096:	4613      	mov	r3, r2
 8002098:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800209c:	189b      	adds	r3, r3, r2
 800209e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a0:	189b      	adds	r3, r3, r2
 80020a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff94 	bl	8001fd8 <typeConversion>
 80020b0:	4605      	mov	r5, r0
 80020b2:	4b7c      	ldr	r3, [pc, #496]	; (80022a4 <Calculations+0x250>)
 80020b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	b21b      	sxth	r3, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fb76 	bl	80027b0 <__aeabi_i2f>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4628      	mov	r0, r5
 80020c8:	4619      	mov	r1, r3
 80020ca:	f000 fbc5 	bl	8002858 <__aeabi_fmul>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4620      	mov	r0, r4
 80020d2:	4619      	mov	r1, r3
 80020d4:	f000 fab8 	bl	8002648 <__addsf3>
 80020d8:	4603      	mov	r3, r0
 80020da:	461a      	mov	r2, r3
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80020e2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80020e6:	18cb      	adds	r3, r1, r3
 80020e8:	f843 2c18 	str.w	r2, [r3, #-24]
			tmpCoordinateCMVector[countIn]           += typeConversion(rotationMatrix[countIn][countSum]) * (float)ToolProperties.CMVector[countSum];
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80020f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020f6:	18d3      	adds	r3, r2, r3
 80020f8:	f853 4c24 	ldr.w	r4, [r3, #-36]
 80020fc:	4968      	ldr	r1, [pc, #416]	; (80022a0 <Calculations+0x24c>)
 80020fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002100:	4613      	mov	r3, r2
 8002102:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002106:	189b      	adds	r3, r3, r2
 8002108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210a:	189b      	adds	r3, r3, r2
 800210c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002110:	b29b      	uxth	r3, r3
 8002112:	b29b      	uxth	r3, r3
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff5f 	bl	8001fd8 <typeConversion>
 800211a:	4605      	mov	r5, r0
 800211c:	4a61      	ldr	r2, [pc, #388]	; (80022a4 <Calculations+0x250>)
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002124:	18d3      	adds	r3, r2, r3
 8002126:	88db      	ldrh	r3, [r3, #6]
 8002128:	b29b      	uxth	r3, r3
 800212a:	b21b      	sxth	r3, r3
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fb3f 	bl	80027b0 <__aeabi_i2f>
 8002132:	4603      	mov	r3, r0
 8002134:	4628      	mov	r0, r5
 8002136:	4619      	mov	r1, r3
 8002138:	f000 fb8e 	bl	8002858 <__aeabi_fmul>
 800213c:	4603      	mov	r3, r0
 800213e:	4620      	mov	r0, r4
 8002140:	4619      	mov	r1, r3
 8002142:	f000 fa81 	bl	8002648 <__addsf3>
 8002146:	4603      	mov	r3, r0
 8002148:	461a      	mov	r2, r3
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002150:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002154:	18cb      	adds	r3, r1, r3
 8002156:	f843 2c24 	str.w	r2, [r3, #-36]
	/*Vector rotation:
	 *[totalRotationMatrix X gravityForceVector]
	 *[totalRotationMatrix X CMVector]*/

	for(countIn = 0; countIn < 3; countIn++)
		for(countSum = 0; countSum < 3; countSum++)
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	f103 0301 	add.w	r3, r3, #1
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	2b02      	cmp	r3, #2
 8002166:	dd8c      	ble.n	8002082 <Calculations+0x2e>

	/*Vector rotation:
	 *[totalRotationMatrix X gravityForceVector]
	 *[totalRotationMatrix X CMVector]*/

	for(countIn = 0; countIn < 3; countIn++)
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	f103 0301 	add.w	r3, r3, #1
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	2b02      	cmp	r3, #2
 8002174:	dd81      	ble.n	800207a <Calculations+0x26>

	/*Gravity force torque:
	 *[CMVector X  gravityForceVector]*/

	int16_t gravityForceTorqueVector[3];
	gravityForceTorqueVector[0] = tmpCoordinateCMVector[1] * tmpCoordinateGravityForceVector[2] - tmpCoordinateCMVector[2] * tmpCoordinateGravityForceVector[1];
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	f000 fb6b 	bl	8002858 <__aeabi_fmul>
 8002182:	4603      	mov	r3, r0
 8002184:	461c      	mov	r4, r3
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f000 fb63 	bl	8002858 <__aeabi_fmul>
 8002192:	4603      	mov	r3, r0
 8002194:	4620      	mov	r0, r4
 8002196:	4619      	mov	r1, r3
 8002198:	f000 fa54 	bl	8002644 <__aeabi_fsub>
 800219c:	4603      	mov	r3, r0
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 fd20 	bl	8002be4 <__aeabi_f2iz>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	80bb      	strh	r3, [r7, #4]
	gravityForceTorqueVector[1] = tmpCoordinateCMVector[2] * tmpCoordinateGravityForceVector[0] - tmpCoordinateCMVector[0] * tmpCoordinateGravityForceVector[2];
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f000 fb51 	bl	8002858 <__aeabi_fmul>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461c      	mov	r4, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f000 fb49 	bl	8002858 <__aeabi_fmul>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4620      	mov	r0, r4
 80021ca:	4619      	mov	r1, r3
 80021cc:	f000 fa3a 	bl	8002644 <__aeabi_fsub>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fd06 	bl	8002be4 <__aeabi_f2iz>
 80021d8:	4603      	mov	r3, r0
 80021da:	b29b      	uxth	r3, r3
 80021dc:	80fb      	strh	r3, [r7, #6]
	gravityForceTorqueVector[2] = tmpCoordinateCMVector[0] * tmpCoordinateGravityForceVector[1] - tmpCoordinateCMVector[1] * tmpCoordinateGravityForceVector[0];
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f000 fb37 	bl	8002858 <__aeabi_fmul>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461c      	mov	r4, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f000 fb2f 	bl	8002858 <__aeabi_fmul>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4620      	mov	r0, r4
 80021fe:	4619      	mov	r1, r3
 8002200:	f000 fa20 	bl	8002644 <__aeabi_fsub>
 8002204:	4603      	mov	r3, r0
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fcec 	bl	8002be4 <__aeabi_f2iz>
 800220c:	4603      	mov	r3, r0
 800220e:	b29b      	uxth	r3, r3
 8002210:	813b      	strh	r3, [r7, #8]

	/*Subtraction*/

	for(countEx = 0; countEx < 3; countEx++)
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002218:	e03a      	b.n	8002290 <Calculations+0x23c>
	{
		clearValues.forceVector[countEx]  = sensorValues.forceVector[countEx]  - tmpCoordinateGravityForceVector[countEx];
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <Calculations+0x254>)
 800221c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002222:	b29b      	uxth	r3, r3
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fac3 	bl	80027b0 <__aeabi_i2f>
 800222a:	4602      	mov	r2, r0
 800222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002232:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002236:	18cb      	adds	r3, r1, r3
 8002238:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	f000 fa00 	bl	8002644 <__aeabi_fsub>
 8002244:	4603      	mov	r3, r0
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fcf2 	bl	8002c30 <__aeabi_f2uiz>
 800224c:	4603      	mov	r3, r0
 800224e:	b299      	uxth	r1, r3
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <Calculations+0x258>)
 8002252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002254:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		clearValues.torqueVector[countEx] = sensorValues.torqueVector[countEx] - gravityForceTorqueVector[countEx];
 8002258:	4a13      	ldr	r2, [pc, #76]	; (80022a8 <Calculations+0x254>)
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002260:	18d3      	adds	r3, r2, r3
 8002262:	88db      	ldrh	r3, [r3, #6]
 8002264:	b29a      	uxth	r2, r3
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800226c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002270:	18cb      	adds	r3, r1, r3
 8002272:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8002276:	b29b      	uxth	r3, r3
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	b29a      	uxth	r2, r3
 800227c:	490b      	ldr	r1, [pc, #44]	; (80022ac <Calculations+0x258>)
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002284:	18cb      	adds	r3, r1, r3
 8002286:	80da      	strh	r2, [r3, #6]
	gravityForceTorqueVector[1] = tmpCoordinateCMVector[2] * tmpCoordinateGravityForceVector[0] - tmpCoordinateCMVector[0] * tmpCoordinateGravityForceVector[2];
	gravityForceTorqueVector[2] = tmpCoordinateCMVector[0] * tmpCoordinateGravityForceVector[1] - tmpCoordinateCMVector[1] * tmpCoordinateGravityForceVector[0];

	/*Subtraction*/

	for(countEx = 0; countEx < 3; countEx++)
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	f103 0301 	add.w	r3, r3, #1
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	2b02      	cmp	r3, #2
 8002294:	ddc1      	ble.n	800221a <Calculations+0x1c6>
	{
		clearValues.forceVector[countEx]  = sensorValues.forceVector[countEx]  - tmpCoordinateGravityForceVector[countEx];
		clearValues.torqueVector[countEx] = sensorValues.torqueVector[countEx] - gravityForceTorqueVector[countEx];
	}

}
 8002296:	f107 0730 	add.w	r7, r7, #48	; 0x30
 800229a:	46bd      	mov	sp, r7
 800229c:	bdb0      	pop	{r4, r5, r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000020 	.word	0x20000020
 80022a4:	20000048 	.word	0x20000048
 80022a8:	20000014 	.word	0x20000014
 80022ac:	20000034 	.word	0x20000034
 80022b0:	00000000 	.word	0x00000000

080022b4 <main>:
#include "calculations.h"

volatile BitAction TmpBitVal;

int main()
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0

	TmpBitVal = Bit_RESET;
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <main+0x58>)
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]

	SetupLED();
 80022c0:	f000 f8ce 	bl	8002460 <SetupLED>

	Setup_USART_NVIC();
 80022c4:	f000 f99e 	bl	8002604 <Setup_USART_NVIC>
	SetupUSART();
 80022c8:	f000 f940 	bl	800254c <SetupUSART>

	while(1)
	{
		if(rxCount == END_RX_SEQUENCE)
 80022cc:	4b10      	ldr	r3, [pc, #64]	; (8002310 <main+0x5c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b0f      	cmp	r3, #15
 80022d2:	d10f      	bne.n	80022f4 <main+0x40>
		{
			USART_ITConfig(USART3, USART_IT_RXNE, DISABLE);
 80022d4:	480f      	ldr	r0, [pc, #60]	; (8002314 <main+0x60>)
 80022d6:	f240 5125 	movw	r1, #1317	; 0x525
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f7ff fb69 	bl	80019b4 <USART_ITConfig>
			Calculations();
 80022e2:	f7ff feb7 	bl	8002054 <Calculations>
			USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 80022e6:	480b      	ldr	r0, [pc, #44]	; (8002314 <main+0x60>)
 80022e8:	f240 5125 	movw	r1, #1317	; 0x525
 80022ec:	f04f 0201 	mov.w	r2, #1
 80022f0:	f7ff fb60 	bl	80019b4 <USART_ITConfig>
		}

		USART_SendData(USART3, *txSeq[txCount]);
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <main+0x64>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <main+0x68>)
 80022fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	4804      	ldr	r0, [pc, #16]	; (8002314 <main+0x60>)
 8002302:	4619      	mov	r1, r3
 8002304:	f7ff fc60 	bl	8001bc8 <USART_SendData>
	}
 8002308:	e7e0      	b.n	80022cc <main+0x18>
 800230a:	bf00      	nop
 800230c:	20000054 	.word	0x20000054
 8002310:	20000040 	.word	0x20000040
 8002314:	40004800 	.word	0x40004800
 8002318:	20000044 	.word	0x20000044
 800231c:	08002cbc 	.word	0x08002cbc

08002320 <RTC_IRQHandler>:


/**************** Interrupts *******************/

void RTC_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	if(RTC_GetITStatus(RTC_IT_SEC))
 8002324:	f04f 0001 	mov.w	r0, #1
 8002328:	f7ff f944 	bl	80015b4 <RTC_GetITStatus>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d011      	beq.n	8002356 <RTC_IRQHandler+0x36>
	{
		RTC_ClearITPendingBit(RTC_IT_SEC);
 8002332:	f04f 0001 	mov.w	r0, #1
 8002336:	f7ff f969 	bl	800160c <RTC_ClearITPendingBit>
		if(TmpBitVal == Bit_RESET) TmpBitVal = Bit_SET;
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <RTC_IRQHandler+0x4c>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d104      	bne.n	800234e <RTC_IRQHandler+0x2e>
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <RTC_IRQHandler+0x4c>)
 8002346:	f04f 0201 	mov.w	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e003      	b.n	8002356 <RTC_IRQHandler+0x36>
		else TmpBitVal = Bit_RESET;
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <RTC_IRQHandler+0x4c>)
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
	}

	GPIO_WriteBit(GPIOC, GPIO_Pin_12, TmpBitVal);
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <RTC_IRQHandler+0x4c>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	4804      	ldr	r0, [pc, #16]	; (8002370 <RTC_IRQHandler+0x50>)
 800235e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002362:	461a      	mov	r2, r3
 8002364:	f7fe f99e 	bl	80006a4 <GPIO_WriteBit>

}
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000054 	.word	0x20000054
 8002370:	40011000 	.word	0x40011000

08002374 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART3, USART_IT_RXNE))
 800237a:	4832      	ldr	r0, [pc, #200]	; (8002444 <USART3_IRQHandler+0xd0>)
 800237c:	f240 5125 	movw	r1, #1317	; 0x525
 8002380:	f7ff fda6 	bl	8001ed0 <USART_GetITStatus>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d025      	beq.n	80023d6 <USART3_IRQHandler+0x62>
	{
		USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 800238a:	482e      	ldr	r0, [pc, #184]	; (8002444 <USART3_IRQHandler+0xd0>)
 800238c:	f240 5125 	movw	r1, #1317	; 0x525
 8002390:	f7ff fe00 	bl	8001f94 <USART_ClearITPendingBit>
		uint16_t tmp;
		tmp = USART_ReceiveData(USART3);
 8002394:	482b      	ldr	r0, [pc, #172]	; (8002444 <USART3_IRQHandler+0xd0>)
 8002396:	f7ff fc2b 	bl	8001bf0 <USART_ReceiveData>
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
		rxCount++;
 800239e:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <USART3_IRQHandler+0xd4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f103 0201 	add.w	r2, r3, #1
 80023a6:	4b28      	ldr	r3, [pc, #160]	; (8002448 <USART3_IRQHandler+0xd4>)
 80023a8:	601a      	str	r2, [r3, #0]

		if(rxCount > END_RX_SEQUENCE)
 80023aa:	4b27      	ldr	r3, [pc, #156]	; (8002448 <USART3_IRQHandler+0xd4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b0f      	cmp	r3, #15
 80023b0:	dd09      	ble.n	80023c6 <USART3_IRQHandler+0x52>
		{
			if(tmp == START_RX_BYTE) rxCount = 0;
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <USART3_IRQHandler+0xd8>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	88fa      	ldrh	r2, [r7, #6]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d128      	bne.n	800240e <USART3_IRQHandler+0x9a>
 80023bc:	4b22      	ldr	r3, [pc, #136]	; (8002448 <USART3_IRQHandler+0xd4>)
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e023      	b.n	800240e <USART3_IRQHandler+0x9a>
		}
		else *rxSeq[rxCount] = tmp;
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <USART3_IRQHandler+0xd4>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b21      	ldr	r3, [pc, #132]	; (8002450 <USART3_IRQHandler+0xdc>)
 80023cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d0:	88fa      	ldrh	r2, [r7, #6]
 80023d2:	801a      	strh	r2, [r3, #0]
 80023d4:	e01b      	b.n	800240e <USART3_IRQHandler+0x9a>
	}
	else if(USART_GetITStatus(USART3, USART_IT_TC))
 80023d6:	481b      	ldr	r0, [pc, #108]	; (8002444 <USART3_IRQHandler+0xd0>)
 80023d8:	f240 6126 	movw	r1, #1574	; 0x626
 80023dc:	f7ff fd78 	bl	8001ed0 <USART_GetITStatus>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d013      	beq.n	800240e <USART3_IRQHandler+0x9a>
	{
		USART_ClearITPendingBit(USART3, USART_IT_TC);
 80023e6:	4817      	ldr	r0, [pc, #92]	; (8002444 <USART3_IRQHandler+0xd0>)
 80023e8:	f240 6126 	movw	r1, #1574	; 0x626
 80023ec:	f7ff fdd2 	bl	8001f94 <USART_ClearITPendingBit>
		if(txCount > END_TX_SEQUENCE) txCount = 0;
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <USART3_IRQHandler+0xe0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b06      	cmp	r3, #6
 80023f6:	dd04      	ble.n	8002402 <USART3_IRQHandler+0x8e>
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <USART3_IRQHandler+0xe0>)
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e005      	b.n	800240e <USART3_IRQHandler+0x9a>
		else txCount++;
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <USART3_IRQHandler+0xe0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f103 0201 	add.w	r2, r3, #1
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <USART3_IRQHandler+0xe0>)
 800240c:	601a      	str	r2, [r3, #0]
	}

	if(TmpBitVal == Bit_RESET) TmpBitVal = Bit_SET;
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <USART3_IRQHandler+0xe4>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d104      	bne.n	8002422 <USART3_IRQHandler+0xae>
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <USART3_IRQHandler+0xe4>)
 800241a:	f04f 0201 	mov.w	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	e003      	b.n	800242a <USART3_IRQHandler+0xb6>
	else TmpBitVal = Bit_RESET;
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <USART3_IRQHandler+0xe4>)
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
	GPIO_WriteBit(GPIOC, GPIO_Pin_12, TmpBitVal);
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <USART3_IRQHandler+0xe4>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	480a      	ldr	r0, [pc, #40]	; (800245c <USART3_IRQHandler+0xe8>)
 8002432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002436:	461a      	mov	r2, r3
 8002438:	f7fe f934 	bl	80006a4 <GPIO_WriteBit>
}
 800243c:	f107 0708 	add.w	r7, r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40004800 	.word	0x40004800
 8002448:	20000040 	.word	0x20000040
 800244c:	08002cd8 	.word	0x08002cd8
 8002450:	08002cdc 	.word	0x08002cdc
 8002454:	20000044 	.word	0x20000044
 8002458:	20000054 	.word	0x20000054
 800245c:	40011000 	.word	0x40011000

08002460 <SetupLED>:

/* Includes ------------------------------------------------------------------*/
#include "periph_setup.h"

void SetupLED(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
	/* ==GPIO== */

	//Clocking

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8002466:	f04f 0010 	mov.w	r0, #16
 800246a:	f04f 0101 	mov.w	r1, #1
 800246e:	f7fe fe4f 	bl	8001110 <RCC_APB2PeriphClockCmd>

	//Configure

	GPIO_DeInit(GPIOC);
 8002472:	480b      	ldr	r0, [pc, #44]	; (80024a0 <SetupLED+0x40>)
 8002474:	f7fd ff18 	bl	80002a8 <GPIO_DeInit>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
 8002478:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800247c:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800247e:	f04f 0310 	mov.w	r3, #16
 8002482:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002484:	f04f 0303 	mov.w	r3, #3
 8002488:	71bb      	strb	r3, [r7, #6]

	//Init

	GPIO_Init(GPIOC , &GPIO_InitStructure);
 800248a:	f107 0304 	add.w	r3, r7, #4
 800248e:	4804      	ldr	r0, [pc, #16]	; (80024a0 <SetupLED+0x40>)
 8002490:	4619      	mov	r1, r3
 8002492:	f7fd ffa5 	bl	80003e0 <GPIO_Init>

	/* =======*/
}
 8002496:	f107 0708 	add.w	r7, r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40011000 	.word	0x40011000

080024a4 <SetupRTC>:

void SetupRTC(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	/* CK_RTC clock selection */
		RCC_APB1PeriphClockCmd( RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE );
 80024a8:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 80024ac:	f04f 0101 	mov.w	r1, #1
 80024b0:	f7fe fe4e 	bl	8001150 <RCC_APB1PeriphClockCmd>

		/* Allow access to BKP Domain */
		PWR_BackupAccessCmd( ENABLE );
 80024b4:	f04f 0001 	mov.w	r0, #1
 80024b8:	f7fe fa68 	bl	800098c <PWR_BackupAccessCmd>

		/* Enable the LSE OSC */
		RCC_LSEConfig( RCC_LSE_ON );
 80024bc:	f04f 0001 	mov.w	r0, #1
 80024c0:	f7fe fcf0 	bl	8000ea4 <RCC_LSEConfig>

		/* Wait till LSE is ready */
		while ( RCC_GetFlagStatus( RCC_FLAG_LSERDY ) == RESET ){}
 80024c4:	bf00      	nop
 80024c6:	f04f 0041 	mov.w	r0, #65	; 0x41
 80024ca:	f7fe fed1 	bl	8001270 <RCC_GetFlagStatus>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f8      	beq.n	80024c6 <SetupRTC+0x22>

		/* Select the RTC Clock Source */
		RCC_RTCCLKConfig( RCC_RTCCLKSource_LSE );
 80024d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024d8:	f7fe fd1a 	bl	8000f10 <RCC_RTCCLKConfig>

		/* Enable the RTC Clock */
		RCC_RTCCLKCmd( ENABLE );
 80024dc:	f04f 0001 	mov.w	r0, #1
 80024e0:	f7fe fd28 	bl	8000f34 <RCC_RTCCLKCmd>

		/* Wait for RTC registers synchronization */
		RTC_WaitForSynchro();
 80024e4:	f7ff f816 	bl	8001514 <RTC_WaitForSynchro>

		/* Wait until last write operation on RTC registers has finished */
		RTC_WaitForLastTask();
 80024e8:	f7ff f804 	bl	80014f4 <RTC_WaitForLastTask>

		/* Enable the RTC Second interrupt */
		RTC_ITConfig(RTC_IT_SEC, ENABLE);
 80024ec:	f04f 0001 	mov.w	r0, #1
 80024f0:	f04f 0101 	mov.w	r1, #1
 80024f4:	f7fe ff38 	bl	8001368 <RTC_ITConfig>

		/* Wait until last write operation on RTC registers has finished */
		RTC_WaitForLastTask();
 80024f8:	f7fe fffc 	bl	80014f4 <RTC_WaitForLastTask>

		/* Set RTC prescaler: set RTC period to 1sec */
		/* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
		RTC_SetPrescaler( RTC_PRESCALER );
 80024fc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002500:	f7fe ffa8 	bl	8001454 <RTC_SetPrescaler>

		/* Wait until last write operation on RTC registers has finished */
		RTC_WaitForLastTask();
 8002504:	f7fe fff6 	bl	80014f4 <RTC_WaitForLastTask>

		RTC_EnterConfigMode();
 8002508:	f7fe ff54 	bl	80013b4 <RTC_EnterConfigMode>

		RTC_ExitConfigMode();
 800250c:	f7fe ff62 	bl	80013d4 <RTC_ExitConfigMode>
}
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop

08002514 <Setup_RTC_NVIC>:

void Setup_RTC_NVIC(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
	/* Interrupt structure */
		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 800251a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800251e:	f7fd fdf5 	bl	800010c <NVIC_PriorityGroupConfig>

		NVIC_InitTypeDef NVIC_InitStructure;
		NVIC_InitStructure.NVIC_IRQChannel = RTC_IRQn;
 8002522:	f04f 0303 	mov.w	r3, #3
 8002526:	713b      	strb	r3, [r7, #4]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8002528:	f04f 0301 	mov.w	r3, #1
 800252c:	717b      	strb	r3, [r7, #5]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 800252e:	f04f 0303 	mov.w	r3, #3
 8002532:	71bb      	strb	r3, [r7, #6]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002534:	f04f 0301 	mov.w	r3, #1
 8002538:	71fb      	strb	r3, [r7, #7]

		NVIC_Init(&NVIC_InitStructure);
 800253a:	f107 0304 	add.w	r3, r7, #4
 800253e:	4618      	mov	r0, r3
 8002540:	f7fd fdf6 	bl	8000130 <NVIC_Init>
}
 8002544:	f107 0708 	add.w	r7, r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <SetupUSART>:

void SetupUSART(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
	/* Enable GPIOB clock                                                   */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002552:	f04f 0008 	mov.w	r0, #8
 8002556:	f04f 0101 	mov.w	r1, #1
 800255a:	f7fe fdd9 	bl	8001110 <RCC_APB2PeriphClockCmd>

	GPIO_DeInit(GPIOB);
 800255e:	4827      	ldr	r0, [pc, #156]	; (80025fc <SetupUSART+0xb0>)
 8002560:	f7fd fea2 	bl	80002a8 <GPIO_DeInit>

	GPIO_InitTypeDef  GPIO_InitStructure;

	/* Configure USART3 Rx (PB11) as input floating                         */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_11;
 8002564:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002568:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800256a:	f04f 0303 	mov.w	r3, #3
 800256e:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
 8002570:	f04f 0304 	mov.w	r3, #4
 8002574:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002576:	f107 0314 	add.w	r3, r7, #20
 800257a:	4820      	ldr	r0, [pc, #128]	; (80025fc <SetupUSART+0xb0>)
 800257c:	4619      	mov	r1, r3
 800257e:	f7fd ff2f 	bl	80003e0 <GPIO_Init>

	/* Configure USART3 Tx (PB10) as alternate function push-pull            */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_10;
 8002582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002586:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002588:	f04f 0303 	mov.w	r3, #3
 800258c:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
 800258e:	f04f 0318 	mov.w	r3, #24
 8002592:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	4818      	ldr	r0, [pc, #96]	; (80025fc <SetupUSART+0xb0>)
 800259a:	4619      	mov	r1, r3
 800259c:	f7fd ff20 	bl	80003e0 <GPIO_Init>

	/* Enable USART3 clock                                                   */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 80025a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80025a4:	f04f 0101 	mov.w	r1, #1
 80025a8:	f7fe fdd2 	bl	8001150 <RCC_APB1PeriphClockCmd>

	USART_InitTypeDef USART_InitStructure;

	USART_InitStructure.USART_BaudRate            = 9600;
 80025ac:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80025b0:	607b      	str	r3, [r7, #4]
	USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_StopBits            = USART_StopBits_1;
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	817b      	strh	r3, [r7, #10]
	USART_InitStructure.USART_Parity              = USART_Parity_No ;
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
 80025c4:	f04f 030c 	mov.w	r3, #12
 80025c8:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	823b      	strh	r3, [r7, #16]

	USART_Init(USART3, &USART_InitStructure);
 80025d0:	f107 0304 	add.w	r3, r7, #4
 80025d4:	480a      	ldr	r0, [pc, #40]	; (8002600 <SetupUSART+0xb4>)
 80025d6:	4619      	mov	r1, r3
 80025d8:	f7ff f896 	bl	8001708 <USART_Init>
	USART_Cmd(USART3, ENABLE);
 80025dc:	4808      	ldr	r0, [pc, #32]	; (8002600 <SetupUSART+0xb4>)
 80025de:	f04f 0101 	mov.w	r1, #1
 80025e2:	f7ff f9c7 	bl	8001974 <USART_Cmd>
	/*Interrupt after reception or transfer*/
	USART_ITConfig(USART3, USART_IT_RXNE | USART_IT_TC, ENABLE);
 80025e6:	4806      	ldr	r0, [pc, #24]	; (8002600 <SetupUSART+0xb4>)
 80025e8:	f240 7127 	movw	r1, #1831	; 0x727
 80025ec:	f04f 0201 	mov.w	r2, #1
 80025f0:	f7ff f9e0 	bl	80019b4 <USART_ITConfig>

}
 80025f4:	f107 0718 	add.w	r7, r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40010c00 	.word	0x40010c00
 8002600:	40004800 	.word	0x40004800

08002604 <Setup_USART_NVIC>:

void Setup_USART_NVIC(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 800260a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800260e:	f7fd fd7d 	bl	800010c <NVIC_PriorityGroupConfig>

	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 8002612:	f04f 0327 	mov.w	r3, #39	; 0x27
 8002616:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8002618:	f04f 0301 	mov.w	r3, #1
 800261c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 800261e:	f04f 0303 	mov.w	r3, #3
 8002622:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002624:	f04f 0301 	mov.w	r3, #1
 8002628:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&NVIC_InitStructure);
 800262a:	f107 0304 	add.w	r3, r7, #4
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd fd7e 	bl	8000130 <NVIC_Init>
}
 8002634:	f107 0708 	add.w	r7, r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <__aeabi_frsub>:
 800263c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8002640:	e002      	b.n	8002648 <__addsf3>
 8002642:	bf00      	nop

08002644 <__aeabi_fsub>:
 8002644:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08002648 <__addsf3>:
 8002648:	0042      	lsls	r2, r0, #1
 800264a:	bf1f      	itttt	ne
 800264c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8002650:	ea92 0f03 	teqne	r2, r3
 8002654:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8002658:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800265c:	d06a      	beq.n	8002734 <__addsf3+0xec>
 800265e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8002662:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8002666:	bfc1      	itttt	gt
 8002668:	18d2      	addgt	r2, r2, r3
 800266a:	4041      	eorgt	r1, r0
 800266c:	4048      	eorgt	r0, r1
 800266e:	4041      	eorgt	r1, r0
 8002670:	bfb8      	it	lt
 8002672:	425b      	neglt	r3, r3
 8002674:	2b19      	cmp	r3, #25
 8002676:	bf88      	it	hi
 8002678:	4770      	bxhi	lr
 800267a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800267e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002682:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002686:	bf18      	it	ne
 8002688:	4240      	negne	r0, r0
 800268a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800268e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002692:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8002696:	bf18      	it	ne
 8002698:	4249      	negne	r1, r1
 800269a:	ea92 0f03 	teq	r2, r3
 800269e:	d03f      	beq.n	8002720 <__addsf3+0xd8>
 80026a0:	f1a2 0201 	sub.w	r2, r2, #1
 80026a4:	fa41 fc03 	asr.w	ip, r1, r3
 80026a8:	eb10 000c 	adds.w	r0, r0, ip
 80026ac:	f1c3 0320 	rsb	r3, r3, #32
 80026b0:	fa01 f103 	lsl.w	r1, r1, r3
 80026b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80026b8:	d502      	bpl.n	80026c0 <__addsf3+0x78>
 80026ba:	4249      	negs	r1, r1
 80026bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80026c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80026c4:	d313      	bcc.n	80026ee <__addsf3+0xa6>
 80026c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80026ca:	d306      	bcc.n	80026da <__addsf3+0x92>
 80026cc:	0840      	lsrs	r0, r0, #1
 80026ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80026d2:	f102 0201 	add.w	r2, r2, #1
 80026d6:	2afe      	cmp	r2, #254	; 0xfe
 80026d8:	d251      	bcs.n	800277e <__addsf3+0x136>
 80026da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80026de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80026e2:	bf08      	it	eq
 80026e4:	f020 0001 	biceq.w	r0, r0, #1
 80026e8:	ea40 0003 	orr.w	r0, r0, r3
 80026ec:	4770      	bx	lr
 80026ee:	0049      	lsls	r1, r1, #1
 80026f0:	eb40 0000 	adc.w	r0, r0, r0
 80026f4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80026f8:	f1a2 0201 	sub.w	r2, r2, #1
 80026fc:	d1ed      	bne.n	80026da <__addsf3+0x92>
 80026fe:	fab0 fc80 	clz	ip, r0
 8002702:	f1ac 0c08 	sub.w	ip, ip, #8
 8002706:	ebb2 020c 	subs.w	r2, r2, ip
 800270a:	fa00 f00c 	lsl.w	r0, r0, ip
 800270e:	bfaa      	itet	ge
 8002710:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8002714:	4252      	neglt	r2, r2
 8002716:	4318      	orrge	r0, r3
 8002718:	bfbc      	itt	lt
 800271a:	40d0      	lsrlt	r0, r2
 800271c:	4318      	orrlt	r0, r3
 800271e:	4770      	bx	lr
 8002720:	f092 0f00 	teq	r2, #0
 8002724:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8002728:	bf06      	itte	eq
 800272a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800272e:	3201      	addeq	r2, #1
 8002730:	3b01      	subne	r3, #1
 8002732:	e7b5      	b.n	80026a0 <__addsf3+0x58>
 8002734:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8002738:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800273c:	bf18      	it	ne
 800273e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002742:	d021      	beq.n	8002788 <__addsf3+0x140>
 8002744:	ea92 0f03 	teq	r2, r3
 8002748:	d004      	beq.n	8002754 <__addsf3+0x10c>
 800274a:	f092 0f00 	teq	r2, #0
 800274e:	bf08      	it	eq
 8002750:	4608      	moveq	r0, r1
 8002752:	4770      	bx	lr
 8002754:	ea90 0f01 	teq	r0, r1
 8002758:	bf1c      	itt	ne
 800275a:	2000      	movne	r0, #0
 800275c:	4770      	bxne	lr
 800275e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8002762:	d104      	bne.n	800276e <__addsf3+0x126>
 8002764:	0040      	lsls	r0, r0, #1
 8002766:	bf28      	it	cs
 8002768:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800276c:	4770      	bx	lr
 800276e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8002772:	bf3c      	itt	cc
 8002774:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8002778:	4770      	bxcc	lr
 800277a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800277e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8002782:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002786:	4770      	bx	lr
 8002788:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800278c:	bf16      	itet	ne
 800278e:	4608      	movne	r0, r1
 8002790:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8002794:	4601      	movne	r1, r0
 8002796:	0242      	lsls	r2, r0, #9
 8002798:	bf06      	itte	eq
 800279a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800279e:	ea90 0f01 	teqeq	r0, r1
 80027a2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80027a6:	4770      	bx	lr

080027a8 <__aeabi_ui2f>:
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e004      	b.n	80027b8 <__aeabi_i2f+0x8>
 80027ae:	bf00      	nop

080027b0 <__aeabi_i2f>:
 80027b0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80027b4:	bf48      	it	mi
 80027b6:	4240      	negmi	r0, r0
 80027b8:	ea5f 0c00 	movs.w	ip, r0
 80027bc:	bf08      	it	eq
 80027be:	4770      	bxeq	lr
 80027c0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80027c4:	4601      	mov	r1, r0
 80027c6:	f04f 0000 	mov.w	r0, #0
 80027ca:	e01c      	b.n	8002806 <__aeabi_l2f+0x2a>

080027cc <__aeabi_ul2f>:
 80027cc:	ea50 0201 	orrs.w	r2, r0, r1
 80027d0:	bf08      	it	eq
 80027d2:	4770      	bxeq	lr
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e00a      	b.n	80027f0 <__aeabi_l2f+0x14>
 80027da:	bf00      	nop

080027dc <__aeabi_l2f>:
 80027dc:	ea50 0201 	orrs.w	r2, r0, r1
 80027e0:	bf08      	it	eq
 80027e2:	4770      	bxeq	lr
 80027e4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80027e8:	d502      	bpl.n	80027f0 <__aeabi_l2f+0x14>
 80027ea:	4240      	negs	r0, r0
 80027ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80027f0:	ea5f 0c01 	movs.w	ip, r1
 80027f4:	bf02      	ittt	eq
 80027f6:	4684      	moveq	ip, r0
 80027f8:	4601      	moveq	r1, r0
 80027fa:	2000      	moveq	r0, #0
 80027fc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8002800:	bf08      	it	eq
 8002802:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8002806:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800280a:	fabc f28c 	clz	r2, ip
 800280e:	3a08      	subs	r2, #8
 8002810:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8002814:	db10      	blt.n	8002838 <__aeabi_l2f+0x5c>
 8002816:	fa01 fc02 	lsl.w	ip, r1, r2
 800281a:	4463      	add	r3, ip
 800281c:	fa00 fc02 	lsl.w	ip, r0, r2
 8002820:	f1c2 0220 	rsb	r2, r2, #32
 8002824:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002828:	fa20 f202 	lsr.w	r2, r0, r2
 800282c:	eb43 0002 	adc.w	r0, r3, r2
 8002830:	bf08      	it	eq
 8002832:	f020 0001 	biceq.w	r0, r0, #1
 8002836:	4770      	bx	lr
 8002838:	f102 0220 	add.w	r2, r2, #32
 800283c:	fa01 fc02 	lsl.w	ip, r1, r2
 8002840:	f1c2 0220 	rsb	r2, r2, #32
 8002844:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8002848:	fa21 f202 	lsr.w	r2, r1, r2
 800284c:	eb43 0002 	adc.w	r0, r3, r2
 8002850:	bf08      	it	eq
 8002852:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8002856:	4770      	bx	lr

08002858 <__aeabi_fmul>:
 8002858:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800285c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8002860:	bf1e      	ittt	ne
 8002862:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8002866:	ea92 0f0c 	teqne	r2, ip
 800286a:	ea93 0f0c 	teqne	r3, ip
 800286e:	d06f      	beq.n	8002950 <__aeabi_fmul+0xf8>
 8002870:	441a      	add	r2, r3
 8002872:	ea80 0c01 	eor.w	ip, r0, r1
 8002876:	0240      	lsls	r0, r0, #9
 8002878:	bf18      	it	ne
 800287a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800287e:	d01e      	beq.n	80028be <__aeabi_fmul+0x66>
 8002880:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002884:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8002888:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800288c:	fba0 3101 	umull	r3, r1, r0, r1
 8002890:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8002894:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002898:	bf3e      	ittt	cc
 800289a:	0049      	lslcc	r1, r1, #1
 800289c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80028a0:	005b      	lslcc	r3, r3, #1
 80028a2:	ea40 0001 	orr.w	r0, r0, r1
 80028a6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80028aa:	2afd      	cmp	r2, #253	; 0xfd
 80028ac:	d81d      	bhi.n	80028ea <__aeabi_fmul+0x92>
 80028ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80028b6:	bf08      	it	eq
 80028b8:	f020 0001 	biceq.w	r0, r0, #1
 80028bc:	4770      	bx	lr
 80028be:	f090 0f00 	teq	r0, #0
 80028c2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80028c6:	bf08      	it	eq
 80028c8:	0249      	lsleq	r1, r1, #9
 80028ca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80028ce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80028d2:	3a7f      	subs	r2, #127	; 0x7f
 80028d4:	bfc2      	ittt	gt
 80028d6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80028da:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80028de:	4770      	bxgt	lr
 80028e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	3a01      	subs	r2, #1
 80028ea:	dc5d      	bgt.n	80029a8 <__aeabi_fmul+0x150>
 80028ec:	f112 0f19 	cmn.w	r2, #25
 80028f0:	bfdc      	itt	le
 80028f2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80028f6:	4770      	bxle	lr
 80028f8:	f1c2 0200 	rsb	r2, r2, #0
 80028fc:	0041      	lsls	r1, r0, #1
 80028fe:	fa21 f102 	lsr.w	r1, r1, r2
 8002902:	f1c2 0220 	rsb	r2, r2, #32
 8002906:	fa00 fc02 	lsl.w	ip, r0, r2
 800290a:	ea5f 0031 	movs.w	r0, r1, rrx
 800290e:	f140 0000 	adc.w	r0, r0, #0
 8002912:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8002916:	bf08      	it	eq
 8002918:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800291c:	4770      	bx	lr
 800291e:	f092 0f00 	teq	r2, #0
 8002922:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8002926:	bf02      	ittt	eq
 8002928:	0040      	lsleq	r0, r0, #1
 800292a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800292e:	3a01      	subeq	r2, #1
 8002930:	d0f9      	beq.n	8002926 <__aeabi_fmul+0xce>
 8002932:	ea40 000c 	orr.w	r0, r0, ip
 8002936:	f093 0f00 	teq	r3, #0
 800293a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800293e:	bf02      	ittt	eq
 8002940:	0049      	lsleq	r1, r1, #1
 8002942:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8002946:	3b01      	subeq	r3, #1
 8002948:	d0f9      	beq.n	800293e <__aeabi_fmul+0xe6>
 800294a:	ea41 010c 	orr.w	r1, r1, ip
 800294e:	e78f      	b.n	8002870 <__aeabi_fmul+0x18>
 8002950:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8002954:	ea92 0f0c 	teq	r2, ip
 8002958:	bf18      	it	ne
 800295a:	ea93 0f0c 	teqne	r3, ip
 800295e:	d00a      	beq.n	8002976 <__aeabi_fmul+0x11e>
 8002960:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8002964:	bf18      	it	ne
 8002966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800296a:	d1d8      	bne.n	800291e <__aeabi_fmul+0xc6>
 800296c:	ea80 0001 	eor.w	r0, r0, r1
 8002970:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8002974:	4770      	bx	lr
 8002976:	f090 0f00 	teq	r0, #0
 800297a:	bf17      	itett	ne
 800297c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8002980:	4608      	moveq	r0, r1
 8002982:	f091 0f00 	teqne	r1, #0
 8002986:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800298a:	d014      	beq.n	80029b6 <__aeabi_fmul+0x15e>
 800298c:	ea92 0f0c 	teq	r2, ip
 8002990:	d101      	bne.n	8002996 <__aeabi_fmul+0x13e>
 8002992:	0242      	lsls	r2, r0, #9
 8002994:	d10f      	bne.n	80029b6 <__aeabi_fmul+0x15e>
 8002996:	ea93 0f0c 	teq	r3, ip
 800299a:	d103      	bne.n	80029a4 <__aeabi_fmul+0x14c>
 800299c:	024b      	lsls	r3, r1, #9
 800299e:	bf18      	it	ne
 80029a0:	4608      	movne	r0, r1
 80029a2:	d108      	bne.n	80029b6 <__aeabi_fmul+0x15e>
 80029a4:	ea80 0001 	eor.w	r0, r0, r1
 80029a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80029ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80029b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80029b4:	4770      	bx	lr
 80029b6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80029ba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80029be:	4770      	bx	lr

080029c0 <__aeabi_fdiv>:
 80029c0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80029c4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80029c8:	bf1e      	ittt	ne
 80029ca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80029ce:	ea92 0f0c 	teqne	r2, ip
 80029d2:	ea93 0f0c 	teqne	r3, ip
 80029d6:	d069      	beq.n	8002aac <__aeabi_fdiv+0xec>
 80029d8:	eba2 0203 	sub.w	r2, r2, r3
 80029dc:	ea80 0c01 	eor.w	ip, r0, r1
 80029e0:	0249      	lsls	r1, r1, #9
 80029e2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80029e6:	d037      	beq.n	8002a58 <__aeabi_fdiv+0x98>
 80029e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80029ec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80029f0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80029f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80029f8:	428b      	cmp	r3, r1
 80029fa:	bf38      	it	cc
 80029fc:	005b      	lslcc	r3, r3, #1
 80029fe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8002a02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8002a06:	428b      	cmp	r3, r1
 8002a08:	bf24      	itt	cs
 8002a0a:	1a5b      	subcs	r3, r3, r1
 8002a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8002a10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8002a14:	bf24      	itt	cs
 8002a16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8002a1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002a1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8002a22:	bf24      	itt	cs
 8002a24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8002a28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002a2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8002a30:	bf24      	itt	cs
 8002a32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8002a36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	bf18      	it	ne
 8002a3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8002a42:	d1e0      	bne.n	8002a06 <__aeabi_fdiv+0x46>
 8002a44:	2afd      	cmp	r2, #253	; 0xfd
 8002a46:	f63f af50 	bhi.w	80028ea <__aeabi_fmul+0x92>
 8002a4a:	428b      	cmp	r3, r1
 8002a4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8002a50:	bf08      	it	eq
 8002a52:	f020 0001 	biceq.w	r0, r0, #1
 8002a56:	4770      	bx	lr
 8002a58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8002a5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8002a60:	327f      	adds	r2, #127	; 0x7f
 8002a62:	bfc2      	ittt	gt
 8002a64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8002a68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8002a6c:	4770      	bxgt	lr
 8002a6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	3a01      	subs	r2, #1
 8002a78:	e737      	b.n	80028ea <__aeabi_fmul+0x92>
 8002a7a:	f092 0f00 	teq	r2, #0
 8002a7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8002a82:	bf02      	ittt	eq
 8002a84:	0040      	lsleq	r0, r0, #1
 8002a86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8002a8a:	3a01      	subeq	r2, #1
 8002a8c:	d0f9      	beq.n	8002a82 <__aeabi_fdiv+0xc2>
 8002a8e:	ea40 000c 	orr.w	r0, r0, ip
 8002a92:	f093 0f00 	teq	r3, #0
 8002a96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8002a9a:	bf02      	ittt	eq
 8002a9c:	0049      	lsleq	r1, r1, #1
 8002a9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8002aa2:	3b01      	subeq	r3, #1
 8002aa4:	d0f9      	beq.n	8002a9a <__aeabi_fdiv+0xda>
 8002aa6:	ea41 010c 	orr.w	r1, r1, ip
 8002aaa:	e795      	b.n	80029d8 <__aeabi_fdiv+0x18>
 8002aac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8002ab0:	ea92 0f0c 	teq	r2, ip
 8002ab4:	d108      	bne.n	8002ac8 <__aeabi_fdiv+0x108>
 8002ab6:	0242      	lsls	r2, r0, #9
 8002ab8:	f47f af7d 	bne.w	80029b6 <__aeabi_fmul+0x15e>
 8002abc:	ea93 0f0c 	teq	r3, ip
 8002ac0:	f47f af70 	bne.w	80029a4 <__aeabi_fmul+0x14c>
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	e776      	b.n	80029b6 <__aeabi_fmul+0x15e>
 8002ac8:	ea93 0f0c 	teq	r3, ip
 8002acc:	d104      	bne.n	8002ad8 <__aeabi_fdiv+0x118>
 8002ace:	024b      	lsls	r3, r1, #9
 8002ad0:	f43f af4c 	beq.w	800296c <__aeabi_fmul+0x114>
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	e76e      	b.n	80029b6 <__aeabi_fmul+0x15e>
 8002ad8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8002adc:	bf18      	it	ne
 8002ade:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8002ae2:	d1ca      	bne.n	8002a7a <__aeabi_fdiv+0xba>
 8002ae4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8002ae8:	f47f af5c 	bne.w	80029a4 <__aeabi_fmul+0x14c>
 8002aec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8002af0:	f47f af3c 	bne.w	800296c <__aeabi_fmul+0x114>
 8002af4:	e75f      	b.n	80029b6 <__aeabi_fmul+0x15e>
 8002af6:	bf00      	nop

08002af8 <__gesf2>:
 8002af8:	f04f 3cff 	mov.w	ip, #4294967295
 8002afc:	e006      	b.n	8002b0c <__cmpsf2+0x4>
 8002afe:	bf00      	nop

08002b00 <__lesf2>:
 8002b00:	f04f 0c01 	mov.w	ip, #1
 8002b04:	e002      	b.n	8002b0c <__cmpsf2+0x4>
 8002b06:	bf00      	nop

08002b08 <__cmpsf2>:
 8002b08:	f04f 0c01 	mov.w	ip, #1
 8002b0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002b10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8002b14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8002b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8002b1c:	bf18      	it	ne
 8002b1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002b22:	d011      	beq.n	8002b48 <__cmpsf2+0x40>
 8002b24:	b001      	add	sp, #4
 8002b26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8002b2a:	bf18      	it	ne
 8002b2c:	ea90 0f01 	teqne	r0, r1
 8002b30:	bf58      	it	pl
 8002b32:	ebb2 0003 	subspl.w	r0, r2, r3
 8002b36:	bf88      	it	hi
 8002b38:	17c8      	asrhi	r0, r1, #31
 8002b3a:	bf38      	it	cc
 8002b3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8002b40:	bf18      	it	ne
 8002b42:	f040 0001 	orrne.w	r0, r0, #1
 8002b46:	4770      	bx	lr
 8002b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8002b4c:	d102      	bne.n	8002b54 <__cmpsf2+0x4c>
 8002b4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8002b52:	d105      	bne.n	8002b60 <__cmpsf2+0x58>
 8002b54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8002b58:	d1e4      	bne.n	8002b24 <__cmpsf2+0x1c>
 8002b5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8002b5e:	d0e1      	beq.n	8002b24 <__cmpsf2+0x1c>
 8002b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop

08002b68 <__aeabi_cfrcmple>:
 8002b68:	4684      	mov	ip, r0
 8002b6a:	4608      	mov	r0, r1
 8002b6c:	4661      	mov	r1, ip
 8002b6e:	e7ff      	b.n	8002b70 <__aeabi_cfcmpeq>

08002b70 <__aeabi_cfcmpeq>:
 8002b70:	b50f      	push	{r0, r1, r2, r3, lr}
 8002b72:	f7ff ffc9 	bl	8002b08 <__cmpsf2>
 8002b76:	2800      	cmp	r0, #0
 8002b78:	bf48      	it	mi
 8002b7a:	f110 0f00 	cmnmi.w	r0, #0
 8002b7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08002b80 <__aeabi_fcmpeq>:
 8002b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002b84:	f7ff fff4 	bl	8002b70 <__aeabi_cfcmpeq>
 8002b88:	bf0c      	ite	eq
 8002b8a:	2001      	moveq	r0, #1
 8002b8c:	2000      	movne	r0, #0
 8002b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002b92:	bf00      	nop

08002b94 <__aeabi_fcmplt>:
 8002b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002b98:	f7ff ffea 	bl	8002b70 <__aeabi_cfcmpeq>
 8002b9c:	bf34      	ite	cc
 8002b9e:	2001      	movcc	r0, #1
 8002ba0:	2000      	movcs	r0, #0
 8002ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8002ba6:	bf00      	nop

08002ba8 <__aeabi_fcmple>:
 8002ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002bac:	f7ff ffe0 	bl	8002b70 <__aeabi_cfcmpeq>
 8002bb0:	bf94      	ite	ls
 8002bb2:	2001      	movls	r0, #1
 8002bb4:	2000      	movhi	r0, #0
 8002bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8002bba:	bf00      	nop

08002bbc <__aeabi_fcmpge>:
 8002bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002bc0:	f7ff ffd2 	bl	8002b68 <__aeabi_cfrcmple>
 8002bc4:	bf94      	ite	ls
 8002bc6:	2001      	movls	r0, #1
 8002bc8:	2000      	movhi	r0, #0
 8002bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8002bce:	bf00      	nop

08002bd0 <__aeabi_fcmpgt>:
 8002bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002bd4:	f7ff ffc8 	bl	8002b68 <__aeabi_cfrcmple>
 8002bd8:	bf34      	ite	cc
 8002bda:	2001      	movcc	r0, #1
 8002bdc:	2000      	movcs	r0, #0
 8002bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8002be2:	bf00      	nop

08002be4 <__aeabi_f2iz>:
 8002be4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8002be8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8002bec:	d30f      	bcc.n	8002c0e <__aeabi_f2iz+0x2a>
 8002bee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8002bf2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8002bf6:	d90d      	bls.n	8002c14 <__aeabi_f2iz+0x30>
 8002bf8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8002bfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8002c04:	fa23 f002 	lsr.w	r0, r3, r2
 8002c08:	bf18      	it	ne
 8002c0a:	4240      	negne	r0, r0
 8002c0c:	4770      	bx	lr
 8002c0e:	f04f 0000 	mov.w	r0, #0
 8002c12:	4770      	bx	lr
 8002c14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8002c18:	d101      	bne.n	8002c1e <__aeabi_f2iz+0x3a>
 8002c1a:	0242      	lsls	r2, r0, #9
 8002c1c:	d105      	bne.n	8002c2a <__aeabi_f2iz+0x46>
 8002c1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8002c22:	bf08      	it	eq
 8002c24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8002c28:	4770      	bx	lr
 8002c2a:	f04f 0000 	mov.w	r0, #0
 8002c2e:	4770      	bx	lr

08002c30 <__aeabi_f2uiz>:
 8002c30:	0042      	lsls	r2, r0, #1
 8002c32:	d20e      	bcs.n	8002c52 <__aeabi_f2uiz+0x22>
 8002c34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8002c38:	d30b      	bcc.n	8002c52 <__aeabi_f2uiz+0x22>
 8002c3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8002c3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8002c42:	d409      	bmi.n	8002c58 <__aeabi_f2uiz+0x28>
 8002c44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8002c48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c4c:	fa23 f002 	lsr.w	r0, r3, r2
 8002c50:	4770      	bx	lr
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	4770      	bx	lr
 8002c58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8002c5c:	d101      	bne.n	8002c62 <__aeabi_f2uiz+0x32>
 8002c5e:	0242      	lsls	r2, r0, #9
 8002c60:	d102      	bne.n	8002c68 <__aeabi_f2uiz+0x38>
 8002c62:	f04f 30ff 	mov.w	r0, #4294967295
 8002c66:	4770      	bx	lr
 8002c68:	f04f 0000 	mov.w	r0, #0
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop

08002c70 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002c70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002c72:	f000 b804 	b.w	8002c7e <LoopCopyDataInit>

08002c76 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <LoopFillZerobss+0xe>)
	ldr	r3, [r3, r1]
 8002c78:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c7a:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c7c:	3104      	adds	r1, #4

08002c7e <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c7e:	480a      	ldr	r0, [pc, #40]	; (8002ca8 <LoopFillZerobss+0x12>)
	ldr	r3, =_edata
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <LoopFillZerobss+0x16>)
	adds	r2, r0, r1
 8002c82:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c84:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c86:	f4ff aff6 	bcc.w	8002c76 <CopyDataInit>
	ldr	r2, =_sbss
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <LoopFillZerobss+0x1a>)
	b	LoopFillZerobss
 8002c8c:	f000 b803 	b.w	8002c96 <LoopFillZerobss>

08002c90 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c90:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c92:	f842 3b04 	str.w	r3, [r2], #4

08002c96 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <LoopFillZerobss+0x1e>)
	cmp	r2, r3
 8002c98:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c9a:	f4ff aff9 	bcc.w	8002c90 <FillZerobss>
/* Call the clock system intitialization function.*/
    //bl  SystemInit
/* Call static constructors */
    //bl __libc_init_array
/* Call the application's entry point.*/
	bl	main
 8002c9e:	f7ff fb09 	bl	80022b4 <main>
	bx	lr
 8002ca2:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8002ca4:	08002fbc 	.word	0x08002fbc
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ca8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002cac:	20000014 	.word	0x20000014
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8002cb0:	20000014 	.word	0x20000014
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8002cb4:	20000058 	.word	0x20000058

08002cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cb8:	f7ff bffe 	b.w	8002cb8 <ADC1_2_IRQHandler>

08002cbc <txSeq>:
 8002cbc:	2d1c 0800 0034 2000 0036 2000 0038 2000     .-..4.. 6.. 8.. 
 8002ccc:	003a 2000 003c 2000 003e 2000               :.. <.. >.. 

08002cd8 <START_RX_BYTE>:
 8002cd8:	0000 0000                                   ....

08002cdc <rxSeq>:
 8002cdc:	2cd8 0800 0014 2000 0016 2000 0018 2000     .,..... ... ... 
 8002cec:	001a 2000 001c 2000 001e 2000 0020 2000     ... ... ...  .. 
 8002cfc:	0022 2000 0024 2000 0026 2000 0028 2000     ".. $.. &.. (.. 
 8002d0c:	002a 2000 002c 2000 002e 2000 0030 2000     *.. ,.. ... 0.. 

08002d1c <START_TX_BYTE>:
 8002d1c:	0000 0000                                   ....
